# Name of your application. Used to uniquely configure containers.
service: quill

# Name of the container image.
image: anleework/quill

# Deploy to these servers.
servers:
  web:
    hosts:
      - 172.234.89.98
    options:
      network: 'private'
    labels:
      traefik.http.routers.quill.entrypoints: websecure
      traefik.http.routers.quill.rule: Host(`quill.im`)
      traefik.http.routers.quill.tls.certresolver: letsencrypt

  blaze:
    hosts:
      - 172.234.89.98
    cmd: bin/mixin_blaze
    options:
      network: 'private'
  job:
    hosts:
      - 172.234.89.98
    cmd: bundle exec good_job start
    options:
      network: 'private'

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username: anleework

  # Always use an access token rather than real password when possible.
  password:
    - KAMAL_REGISTRY_PASSWORD

# Inject ENV variables into containers (secrets come from .env).
# Remember to run `kamal env push` after making changes!
env:
  clear:
    DATABASE_HOST: 'quill-db'
    POSTGRES_USER: 'postgres'
    POSTGRES_DB: 'quill_production'
  secret:
    - RAILS_MASTER_KEY
    - POSTGRES_PASSWORD

# Use a different ssh user than root
# ssh:
#   user: app

# Configure builder setup.
builder:
  multiarch: false

# Use accessory services (secrets come from .env).
accessories:
  db:
    image: pgvector/pgvector:pg15
    host: 172.234.89.98
    port: 5432
    env:
      clear:
        POSTGRES_USER: 'postgres'
        POSTGRES_DB: 'quill_production'
      secret:
        - POSTGRES_PASSWORD
    files:
      - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
    directories:
      - data:/var/lib/postgresql/data
    options:
      network: 'private'
  # redis:
  #   image: redis:7.0
  #   host: 172.234.89.98
  #   port: 6379
  #   directories:
  #     - data:/data
  #   options:
  #     network: 'private'
# Configure custom arguments for Traefik. Be sure to reboot traefik when you modify it.
traefik:
  options:
    publish:
      - "443:443"
    volume:
      - "/letsencrypt/acme.json:/letsencrypt/acme.json" # To save the configuration file.
    network: "private"
  args:
    entryPoints.web.address: ":80"
    entryPoints.websecure.address: ":443"
    entryPoints.web.http.redirections.entryPoint.to: websecure # We want to force https
    entryPoints.web.http.redirections.entryPoint.scheme: https
    entryPoints.web.http.redirections.entrypoint.permanent: true
    certificatesResolvers.letsencrypt.acme.email: "an.lee.work@gmail.com"
    certificatesResolvers.letsencrypt.acme.storage: "/letsencrypt/acme.json" # Must match the path in `volume`
    certificatesResolvers.letsencrypt.acme.httpchallenge: true
    certificatesResolvers.letsencrypt.acme.httpchallenge.entrypoint: web # Must match the role in `servers`

# Configure a custom healthcheck (default is /up on port 3000)
# healthcheck:
#   path: /healthz
#   port: 4000

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
#
# If your app is using the Sprockets gem, ensure it sets `config.assets.manifest`.
# See https://github.com/basecamp/kamal/issues/626 for details
#
# asset_path: /rails/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Configure the role used to determine the primary_host. This host takes
# deploy locks, runs health checks during the deploy, and follow logs, etc.
#
# Caution: there's no support for role renaming yet, so be careful to cleanup
#          the previous role on the deployed hosts.
# primary_role: web

# Controls if we abort when see a role with no hosts. Disabling this may be
# useful for more complex deploy configurations.
#
# allow_empty_roles: false
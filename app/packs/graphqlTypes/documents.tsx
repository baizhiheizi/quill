import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
const defaultOptions =  {}
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: any;
};

export type AccessToken = {
  __typename?: 'AccessToken';
  createdAt: Scalars['ISO8601DateTime'];
  desensitizedValue: Scalars['String'];
  id: Scalars['ID'];
  lastRequestAt?: Maybe<Scalars['ISO8601DateTime']>;
  lastRequestIp?: Maybe<Scalars['String']>;
  lastRequestMethod?: Maybe<Scalars['String']>;
  lastRequestUrl?: Maybe<Scalars['String']>;
  memo: Scalars['String'];
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  user: User;
  value: Scalars['String'];
};

/** The connection type for AccessToken. */
export type AccessTokenConnection = {
  __typename?: 'AccessTokenConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<AccessTokenEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<AccessToken>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Total # of objects returned from this Plural Query */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type AccessTokenEdge = {
  __typename?: 'AccessTokenEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<AccessToken>;
};

/** Autogenerated input type of AdminBanUserMutation */
export type AdminBanUserMutationInput = {
  id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of AdminBlockArticleMutation */
export type AdminBlockArticleMutationInput = {
  uuid: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of AdminCreateAnnouncementMutation */
export type AdminCreateAnnouncementMutationInput = {
  content: Scalars['String'];
  messageType: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of AdminCreateAnnouncementMutation */
export type AdminCreateAnnouncementMutationPayload = {
  __typename?: 'AdminCreateAnnouncementMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  error?: Maybe<Scalars['String']>;
  success?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

/** Autogenerated input type of AdminCreateBonusMutation */
export type AdminCreateBonusMutationInput = {
  assetId: Scalars['String'];
  userId: Scalars['ID'];
  amount: Scalars['Float'];
  title: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of AdminCreateBonusMutation */
export type AdminCreateBonusMutationPayload = {
  __typename?: 'AdminCreateBonusMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  error?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

/** Autogenerated input type of AdminDeleteAnnouncementMutation */
export type AdminDeleteAnnouncementMutationInput = {
  id: Scalars['Int'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of AdminDeleteAnnouncementMutation */
export type AdminDeleteAnnouncementMutationPayload = {
  __typename?: 'AdminDeleteAnnouncementMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  error?: Maybe<Scalars['String']>;
  success?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

/** Autogenerated input type of AdminDeleteCommentMutation */
export type AdminDeleteCommentMutationInput = {
  id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of AdminDeleteCommentMutation */
export type AdminDeleteCommentMutationPayload = {
  __typename?: 'AdminDeleteCommentMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  error?: Maybe<Scalars['String']>;
  success?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

/** Autogenerated input type of AdminDeliverAnnouncementMutation */
export type AdminDeliverAnnouncementMutationInput = {
  id: Scalars['Int'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of AdminDeliverAnnouncementMutation */
export type AdminDeliverAnnouncementMutationPayload = {
  __typename?: 'AdminDeliverAnnouncementMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  error?: Maybe<Scalars['String']>;
  success?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

/** Autogenerated input type of AdminDeliverBonusMutation */
export type AdminDeliverBonusMutationInput = {
  id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of AdminLoginMutation */
export type AdminLoginMutationInput = {
  name: Scalars['String'];
  password: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of AdminLoginMutation */
export type AdminLoginMutationPayload = {
  __typename?: 'AdminLoginMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  error?: Maybe<Scalars['String']>;
  success?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

/** Autogenerated input type of AdminPreviewAnnouncementMutation */
export type AdminPreviewAnnouncementMutationInput = {
  id: Scalars['Int'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of AdminPreviewAnnouncementMutation */
export type AdminPreviewAnnouncementMutationPayload = {
  __typename?: 'AdminPreviewAnnouncementMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  error?: Maybe<Scalars['String']>;
  success?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

/** Autogenerated input type of AdminRecoverCommentMutation */
export type AdminRecoverCommentMutationInput = {
  id: Scalars['Int'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of AdminRecoverCommentMutation */
export type AdminRecoverCommentMutationPayload = {
  __typename?: 'AdminRecoverCommentMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  error?: Maybe<Scalars['String']>;
  success?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

/** Autogenerated input type of AdminSignArticleSnapshotMutation */
export type AdminSignArticleSnapshotMutationInput = {
  id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of AdminUnbanUserMutation */
export type AdminUnbanUserMutationInput = {
  id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of AdminUnblockArticleMutation */
export type AdminUnblockArticleMutationInput = {
  uuid: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of AdminUpdateAnnouncementMutation */
export type AdminUpdateAnnouncementMutationInput = {
  id: Scalars['Int'];
  content: Scalars['String'];
  messageType: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of AdminUpdateAnnouncementMutation */
export type AdminUpdateAnnouncementMutationPayload = {
  __typename?: 'AdminUpdateAnnouncementMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  error?: Maybe<Scalars['String']>;
  success?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

/** Autogenerated input type of AdminUpdateBonusMutation */
export type AdminUpdateBonusMutationInput = {
  id: Scalars['ID'];
  userId: Scalars['ID'];
  amount: Scalars['Float'];
  title: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of AdminUpdateBonusMutation */
export type AdminUpdateBonusMutationPayload = {
  __typename?: 'AdminUpdateBonusMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  error?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

/** Autogenerated input type of AdminWithdrawBalanceMutation */
export type AdminWithdrawBalanceMutationInput = {
  assetId: Scalars['String'];
  amount: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

export type Announcement = {
  __typename?: 'Announcement';
  content: Scalars['String'];
  createdAt: Scalars['ISO8601DateTime'];
  deliveredAt?: Maybe<Scalars['ISO8601DateTime']>;
  id: Scalars['Int'];
  messageType: Scalars['String'];
  state: Scalars['String'];
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

/** The connection type for Announcement. */
export type AnnouncementConnection = {
  __typename?: 'AnnouncementConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<AnnouncementEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Announcement>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Total # of objects returned from this Plural Query */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type AnnouncementEdge = {
  __typename?: 'AnnouncementEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Announcement>;
};

export type Article = {
  __typename?: 'Article';
  articleReferences?: Maybe<Array<CiterReference>>;
  assetId: Scalars['String'];
  author: User;
  authorRevenueRatio: Scalars['Float'];
  authorRevenueUsd: Scalars['Float'];
  authorized?: Maybe<Scalars['Boolean']>;
  buyOrders: OrderConnection;
  buyers: UserConnection;
  citers?: Maybe<Array<Article>>;
  commentingSubscribed?: Maybe<Scalars['Boolean']>;
  comments: CommentConnection;
  commentsCount: Scalars['Int'];
  content?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  currency: Currency;
  downvoted?: Maybe<Scalars['Boolean']>;
  downvotesCount: Scalars['Int'];
  id: Scalars['ID'];
  intro?: Maybe<Scalars['String']>;
  myShare?: Maybe<Scalars['Float']>;
  ordersCount: Scalars['Int'];
  partialContent?: Maybe<Scalars['String']>;
  paymentTraceId?: Maybe<Scalars['String']>;
  platformRevenueRatio: Scalars['Float'];
  price: Scalars['Float'];
  priceUsd?: Maybe<Scalars['Float']>;
  publishedAt?: Maybe<Scalars['ISO8601DateTime']>;
  randomReaders: Array<User>;
  readerRevenueUsd: Scalars['Float'];
  readers: UserConnection;
  readersRevenueRatio: Scalars['Float'];
  references?: Maybe<Array<Article>>;
  referencesRevenueRatio: Scalars['Float'];
  revenueBtc: Scalars['Float'];
  revenueUsd: Scalars['Float'];
  rewardOrders: OrderConnection;
  rewarders: UserConnection;
  signatureUrl?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  swappable?: Maybe<Scalars['Boolean']>;
  tagNames?: Maybe<Array<Scalars['String']>>;
  tags: Array<Tag>;
  tagsCount: Scalars['Int'];
  title?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  upvoteRatio?: Maybe<Scalars['Int']>;
  upvoted?: Maybe<Scalars['Boolean']>;
  upvotesCount: Scalars['Int'];
  uuid: Scalars['ID'];
  wallet?: Maybe<MixinNetworkUser>;
  walletId?: Maybe<Scalars['String']>;
  wordsCount: Scalars['Int'];
};


export type ArticleBuyOrdersArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type ArticleBuyersArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type ArticleCommentsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type ArticleReadersArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type ArticleRewardOrdersArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type ArticleRewardersArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

/** The connection type for Article. */
export type ArticleConnection = {
  __typename?: 'ArticleConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ArticleEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Article>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Total # of objects returned from this Plural Query */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type ArticleEdge = {
  __typename?: 'ArticleEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Article>;
};

export type ArticleReferenceInput = {
  referenceId: Scalars['ID'];
  revenueRatio: Scalars['Float'];
};

export type ArticleSnapshot = {
  __typename?: 'ArticleSnapshot';
  article: Article;
  articleUuid: Scalars['String'];
  createdAt: Scalars['ISO8601DateTime'];
  fileHash: Scalars['String'];
  id: Scalars['ID'];
  requestedAt?: Maybe<Scalars['ISO8601DateTime']>;
  signatureUrl?: Maybe<Scalars['String']>;
  signedAt?: Maybe<Scalars['ISO8601DateTime']>;
  state: Scalars['String'];
  txId?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

/** The connection type for ArticleSnapshot. */
export type ArticleSnapshotConnection = {
  __typename?: 'ArticleSnapshotConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ArticleSnapshotEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<ArticleSnapshot>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type ArticleSnapshotEdge = {
  __typename?: 'ArticleSnapshotEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<ArticleSnapshot>;
};

export type Asset = {
  __typename?: 'Asset';
  assetId: Scalars['ID'];
  balance?: Maybe<Scalars['String']>;
  chainId?: Maybe<Scalars['ID']>;
  changeBtc?: Maybe<Scalars['String']>;
  changeUsd?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  iconUrl?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  priceBtc?: Maybe<Scalars['String']>;
  priceUsd?: Maybe<Scalars['String']>;
  symbol?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

export type Bonus = {
  __typename?: 'Bonus';
  amount: Scalars['Float'];
  assetId: Scalars['String'];
  createdAt: Scalars['ISO8601DateTime'];
  currency: Currency;
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  state: Scalars['String'];
  title: Scalars['String'];
  traceId: Scalars['String'];
  transfer?: Maybe<Transfer>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  user: User;
};

/** The connection type for Bonus. */
export type BonusConnection = {
  __typename?: 'BonusConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<BonusEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Bonus>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Total # of objects returned from this Plural Query */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type BonusEdge = {
  __typename?: 'BonusEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Bonus>;
};

export type CiterReference = {
  __typename?: 'CiterReference';
  citer: Article;
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  reference: Article;
  revenueRatio: Scalars['Float'];
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

/** Autogenerated input type of ClearNotificationsMutation */
export type ClearNotificationsMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

export type Comment = {
  __typename?: 'Comment';
  author?: Maybe<User>;
  commentable: Article;
  content?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  deletedAt?: Maybe<Scalars['ISO8601DateTime']>;
  downvoted?: Maybe<Scalars['Boolean']>;
  downvotesCount: Scalars['Int'];
  id: Scalars['ID'];
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  upvoted?: Maybe<Scalars['Boolean']>;
  upvotesCount: Scalars['Int'];
};

/** The connection type for Comment. */
export type CommentConnection = {
  __typename?: 'CommentConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<CommentEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Comment>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Total # of objects returned from this Plural Query */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type CommentEdge = {
  __typename?: 'CommentEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Comment>;
};

/** Autogenerated input type of CreateAccessTokenMutation */
export type CreateAccessTokenMutationInput = {
  memo: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of CreateArticleMutation */
export type CreateArticleMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of CreateCommentMutation */
export type CreateCommentMutationInput = {
  commentableId: Scalars['ID'];
  commentableType: Scalars['String'];
  content: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateCommentMutation */
export type CreateCommentMutationPayload = {
  __typename?: 'CreateCommentMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  commentable: Article;
  createdAt: Scalars['ISO8601DateTime'];
  error?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

export type Currency = {
  __typename?: 'Currency';
  assetId: Scalars['String'];
  chainId?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  iconUrl?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name: Scalars['String'];
  priceBtc?: Maybe<Scalars['Float']>;
  priceUsd?: Maybe<Scalars['Float']>;
  symbol: Scalars['String'];
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

export type DailyStatistic = {
  __typename?: 'DailyStatistic';
  createdAt: Scalars['ISO8601DateTime'];
  date: Scalars['String'];
  datetime: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  newArticlesCount?: Maybe<Scalars['Int']>;
  newPayersCount?: Maybe<Scalars['Int']>;
  newPaymentsCount?: Maybe<Scalars['Int']>;
  newUsersCount?: Maybe<Scalars['Int']>;
  paidUsersCount?: Maybe<Scalars['Int']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

/** The connection type for DailyStatistic. */
export type DailyStatisticConnection = {
  __typename?: 'DailyStatisticConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<DailyStatisticEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<DailyStatistic>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type DailyStatisticEdge = {
  __typename?: 'DailyStatisticEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<DailyStatistic>;
};

/** Autogenerated input type of DeleteAccessTokenMutation */
export type DeleteAccessTokenMutationInput = {
  id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of DeleteArticleMutation */
export type DeleteArticleMutationInput = {
  uuid: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of DownvoteArticleMutation */
export type DownvoteArticleMutationInput = {
  uuid: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of DownvoteCommentMutation */
export type DownvoteCommentMutationInput = {
  id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of HideArticleMutation */
export type HideArticleMutationInput = {
  uuid: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of HideArticleMutation */
export type HideArticleMutationPayload = {
  __typename?: 'HideArticleMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  error?: Maybe<Scalars['String']>;
  success?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};


export type MixinMessage = {
  __typename?: 'MixinMessage';
  action: Scalars['String'];
  category: Scalars['String'];
  content: Scalars['String'];
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['Int'];
  processedAt?: Maybe<Scalars['ISO8601DateTime']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  user?: Maybe<User>;
  userId?: Maybe<Scalars['String']>;
};

/** The connection type for MixinMessage. */
export type MixinMessageConnection = {
  __typename?: 'MixinMessageConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<MixinMessageEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<MixinMessage>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Total # of objects returned from this Plural Query */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type MixinMessageEdge = {
  __typename?: 'MixinMessageEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<MixinMessage>;
};

export type MixinNetworkSnapshot = {
  __typename?: 'MixinNetworkSnapshot';
  amount: Scalars['Float'];
  article?: Maybe<Article>;
  assetId: Scalars['String'];
  createdAt: Scalars['ISO8601DateTime'];
  currency: Currency;
  data?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
  opponent?: Maybe<User>;
  opponentId?: Maybe<Scalars['String']>;
  processedAt?: Maybe<Scalars['ISO8601DateTime']>;
  snapshotId: Scalars['String'];
  traceId: Scalars['ID'];
  transferredAt: Scalars['ISO8601DateTime'];
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  userId: Scalars['String'];
};

/** The connection type for MixinNetworkSnapshot. */
export type MixinNetworkSnapshotConnection = {
  __typename?: 'MixinNetworkSnapshotConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<MixinNetworkSnapshotEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<MixinNetworkSnapshot>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Total # of objects returned from this Plural Query */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type MixinNetworkSnapshotEdge = {
  __typename?: 'MixinNetworkSnapshotEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<MixinNetworkSnapshot>;
};

export type MixinNetworkUser = {
  __typename?: 'MixinNetworkUser';
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  name: Scalars['String'];
  owner?: Maybe<MixinNetworkUserOwnerUnion>;
  ownerId: Scalars['Int'];
  ownerType: Scalars['String'];
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  uuid: Scalars['ID'];
};

/** Mixin network user' owner */
export type MixinNetworkUserOwnerUnion = Article | User;

export type Mutation = {
  __typename?: 'Mutation';
  adminBanUser?: Maybe<User>;
  adminBlockArticle?: Maybe<Article>;
  adminCreateAnnouncement?: Maybe<AdminCreateAnnouncementMutationPayload>;
  adminCreateBonus?: Maybe<AdminCreateBonusMutationPayload>;
  adminDeleteAnnouncement?: Maybe<AdminDeleteAnnouncementMutationPayload>;
  adminDeleteComment?: Maybe<AdminDeleteCommentMutationPayload>;
  adminDeliverAnnouncement?: Maybe<AdminDeliverAnnouncementMutationPayload>;
  adminDeliverBonus?: Maybe<Bonus>;
  adminLogin?: Maybe<AdminLoginMutationPayload>;
  adminPreviewAnnouncement?: Maybe<AdminPreviewAnnouncementMutationPayload>;
  adminRecoverComment?: Maybe<AdminRecoverCommentMutationPayload>;
  adminSignArticleSnapshot?: Maybe<ArticleSnapshot>;
  adminUnbanUser?: Maybe<User>;
  adminUnblockArticle?: Maybe<Article>;
  adminUpdateAnnouncement?: Maybe<AdminUpdateAnnouncementMutationPayload>;
  adminUpdateBonus?: Maybe<AdminUpdateBonusMutationPayload>;
  adminWithdrawBalance?: Maybe<Scalars['Boolean']>;
  clearNotifications?: Maybe<Scalars['Boolean']>;
  createAccessToken?: Maybe<AccessToken>;
  createArticle?: Maybe<Article>;
  createComment?: Maybe<CreateCommentMutationPayload>;
  createdAt: Scalars['ISO8601DateTime'];
  deleteAccessToken?: Maybe<Scalars['Boolean']>;
  deleteArticle?: Maybe<Scalars['Boolean']>;
  downvoteArticle?: Maybe<Article>;
  downvoteComment?: Maybe<Comment>;
  hideArticle?: Maybe<HideArticleMutationPayload>;
  publishArticle?: Maybe<Scalars['Boolean']>;
  readNotification?: Maybe<Notification>;
  readNotifications?: Maybe<Scalars['Boolean']>;
  switchLocale?: Maybe<Scalars['Boolean']>;
  toggleAuthoringSubscribeUserAction?: Maybe<ToggleAuthoringSubscribeUserActionMutationPayload>;
  toggleCommentingSubscribeArticleAction?: Maybe<Article>;
  toggleReadingSubscribeUserAction?: Maybe<ToggleReadingSubscribeUserActionMutationPayload>;
  toggleSubscribeTagAction?: Maybe<Tag>;
  updateArticle?: Maybe<Article>;
  updateNotificationSetting?: Maybe<NotificationSetting>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  upvoteArticle?: Maybe<Article>;
  upvoteComment?: Maybe<Comment>;
};


export type MutationAdminBanUserArgs = {
  input: AdminBanUserMutationInput;
};


export type MutationAdminBlockArticleArgs = {
  input: AdminBlockArticleMutationInput;
};


export type MutationAdminCreateAnnouncementArgs = {
  input: AdminCreateAnnouncementMutationInput;
};


export type MutationAdminCreateBonusArgs = {
  input: AdminCreateBonusMutationInput;
};


export type MutationAdminDeleteAnnouncementArgs = {
  input: AdminDeleteAnnouncementMutationInput;
};


export type MutationAdminDeleteCommentArgs = {
  input: AdminDeleteCommentMutationInput;
};


export type MutationAdminDeliverAnnouncementArgs = {
  input: AdminDeliverAnnouncementMutationInput;
};


export type MutationAdminDeliverBonusArgs = {
  input: AdminDeliverBonusMutationInput;
};


export type MutationAdminLoginArgs = {
  input: AdminLoginMutationInput;
};


export type MutationAdminPreviewAnnouncementArgs = {
  input: AdminPreviewAnnouncementMutationInput;
};


export type MutationAdminRecoverCommentArgs = {
  input: AdminRecoverCommentMutationInput;
};


export type MutationAdminSignArticleSnapshotArgs = {
  input: AdminSignArticleSnapshotMutationInput;
};


export type MutationAdminUnbanUserArgs = {
  input: AdminUnbanUserMutationInput;
};


export type MutationAdminUnblockArticleArgs = {
  input: AdminUnblockArticleMutationInput;
};


export type MutationAdminUpdateAnnouncementArgs = {
  input: AdminUpdateAnnouncementMutationInput;
};


export type MutationAdminUpdateBonusArgs = {
  input: AdminUpdateBonusMutationInput;
};


export type MutationAdminWithdrawBalanceArgs = {
  input: AdminWithdrawBalanceMutationInput;
};


export type MutationClearNotificationsArgs = {
  input: ClearNotificationsMutationInput;
};


export type MutationCreateAccessTokenArgs = {
  input: CreateAccessTokenMutationInput;
};


export type MutationCreateArticleArgs = {
  input: CreateArticleMutationInput;
};


export type MutationCreateCommentArgs = {
  input: CreateCommentMutationInput;
};


export type MutationDeleteAccessTokenArgs = {
  input: DeleteAccessTokenMutationInput;
};


export type MutationDeleteArticleArgs = {
  input: DeleteArticleMutationInput;
};


export type MutationDownvoteArticleArgs = {
  input: DownvoteArticleMutationInput;
};


export type MutationDownvoteCommentArgs = {
  input: DownvoteCommentMutationInput;
};


export type MutationHideArticleArgs = {
  input: HideArticleMutationInput;
};


export type MutationPublishArticleArgs = {
  input: PublishArticleMutationInput;
};


export type MutationReadNotificationArgs = {
  input: ReadNotificationMutationInput;
};


export type MutationReadNotificationsArgs = {
  input: ReadNotificationsMutationInput;
};


export type MutationSwitchLocaleArgs = {
  input: SwitchLocaleMutationInput;
};


export type MutationToggleAuthoringSubscribeUserActionArgs = {
  input: ToggleAuthoringSubscribeUserActionMutationInput;
};


export type MutationToggleCommentingSubscribeArticleActionArgs = {
  input: ToggleCommentingSubscribeArticleActionMutationInput;
};


export type MutationToggleReadingSubscribeUserActionArgs = {
  input: ToggleReadingSubscribeUserActionMutationInput;
};


export type MutationToggleSubscribeTagActionArgs = {
  input: ToggleSubscribeTagActionMutationInput;
};


export type MutationUpdateArticleArgs = {
  input: UpdateArticleMutationInput;
};


export type MutationUpdateNotificationSettingArgs = {
  input: UpdateNotificationSettingMutationInput;
};


export type MutationUpvoteArticleArgs = {
  input: UpvoteArticleMutationInput;
};


export type MutationUpvoteCommentArgs = {
  input: UpvoteCommentMutationInput;
};

export type Notification = {
  __typename?: 'Notification';
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  message?: Maybe<Scalars['String']>;
  readAt?: Maybe<Scalars['ISO8601DateTime']>;
  recipient: User;
  type: Scalars['String'];
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  url?: Maybe<Scalars['String']>;
};

/** The connection type for Notification. */
export type NotificationConnection = {
  __typename?: 'NotificationConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<NotificationEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Notification>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Total # of objects returned from this Plural Query */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type NotificationEdge = {
  __typename?: 'NotificationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Notification>;
};

export type NotificationSetting = {
  __typename?: 'NotificationSetting';
  articleBoughtMixinBot?: Maybe<Scalars['Boolean']>;
  articleBoughtWeb?: Maybe<Scalars['Boolean']>;
  articleBoughtWebhook?: Maybe<Scalars['Boolean']>;
  articlePublishedMixinBot?: Maybe<Scalars['Boolean']>;
  articlePublishedWeb?: Maybe<Scalars['Boolean']>;
  articlePublishedWebhook?: Maybe<Scalars['Boolean']>;
  articleRewardedMixinBot?: Maybe<Scalars['Boolean']>;
  articleRewardedWeb?: Maybe<Scalars['Boolean']>;
  articleRewardedWebhook?: Maybe<Scalars['Boolean']>;
  commentCreatedMixinBot?: Maybe<Scalars['Boolean']>;
  commentCreatedWeb?: Maybe<Scalars['Boolean']>;
  commentCreatedWebhook?: Maybe<Scalars['Boolean']>;
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  taggingCreatedMixinBot?: Maybe<Scalars['Boolean']>;
  taggingCreatedWeb?: Maybe<Scalars['Boolean']>;
  taggingCreatedWebhook?: Maybe<Scalars['Boolean']>;
  transferProcessedMixinBot?: Maybe<Scalars['Boolean']>;
  transferProcessedWeb?: Maybe<Scalars['Boolean']>;
  transferProcessedWebhook?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  user: User;
  webhookUrl?: Maybe<Scalars['String']>;
};

export type Order = {
  __typename?: 'Order';
  buyer: User;
  citer?: Maybe<OrderItemUnion>;
  createdAt: Scalars['ISO8601DateTime'];
  currency: Currency;
  id: Scalars['ID'];
  item: OrderItemUnion;
  itemId: Scalars['ID'];
  itemType: Scalars['String'];
  orderType: Scalars['String'];
  seller: User;
  state: Scalars['String'];
  total: Scalars['Float'];
  traceId: Scalars['ID'];
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

/** The connection type for Order. */
export type OrderConnection = {
  __typename?: 'OrderConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<OrderEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Order>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Total # of objects returned from this Plural Query */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type OrderEdge = {
  __typename?: 'OrderEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Order>;
};

/** order' item */
export type OrderItemUnion = Article;

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']>;
};

export type Payment = {
  __typename?: 'Payment';
  amount: Scalars['Float'];
  assetId: Scalars['String'];
  createdAt: Scalars['ISO8601DateTime'];
  currency?: Maybe<Currency>;
  decryptedMemo?: Maybe<Scalars['String']>;
  memo?: Maybe<Scalars['String']>;
  opponentId: Scalars['String'];
  order?: Maybe<Order>;
  payer?: Maybe<User>;
  snapshotId: Scalars['String'];
  state: Scalars['String'];
  traceId: Scalars['ID'];
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

/** The connection type for Payment. */
export type PaymentConnection = {
  __typename?: 'PaymentConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PaymentEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Payment>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Total # of objects returned from this Plural Query */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type PaymentEdge = {
  __typename?: 'PaymentEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Payment>;
};

export type PrsAccount = {
  __typename?: 'PrsAccount';
  account?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  publicKey: Scalars['String'];
  status: Scalars['String'];
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  user: User;
};

/** The connection type for PrsAccount. */
export type PrsAccountConnection = {
  __typename?: 'PrsAccountConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PrsAccountEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<PrsAccount>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type PrsAccountEdge = {
  __typename?: 'PrsAccountEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<PrsAccount>;
};

export type PrsTransaction = {
  __typename?: 'PrsTransaction';
  blockNum: Scalars['Int'];
  blockType: Scalars['String'];
  createdAt: Scalars['ISO8601DateTime'];
  data?: Maybe<Scalars['String']>;
  hashStr: Scalars['String'];
  id: Scalars['ID'];
  processedAt?: Maybe<Scalars['ISO8601DateTime']>;
  prsAccount?: Maybe<PrsAccount>;
  signature: Scalars['String'];
  transactionId?: Maybe<Scalars['String']>;
  txId: Scalars['String'];
  type?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  userAddress: Scalars['String'];
};

/** The connection type for PrsTransaction. */
export type PrsTransactionConnection = {
  __typename?: 'PrsTransactionConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PrsTransactionEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<PrsTransaction>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type PrsTransactionEdge = {
  __typename?: 'PrsTransactionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<PrsTransaction>;
};

/** Autogenerated input type of PublishArticleMutation */
export type PublishArticleMutationInput = {
  uuid: Scalars['ID'];
  price?: Maybe<Scalars['Float']>;
  assetId?: Maybe<Scalars['String']>;
  articleReferences?: Maybe<Array<ArticleReferenceInput>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

export type Query = {
  __typename?: 'Query';
  adminAnnouncementConnection: AnnouncementConnection;
  adminArticle: Article;
  adminArticleConnection: ArticleConnection;
  adminArticleSnapshotConnection: ArticleSnapshotConnection;
  adminBonusConnection: BonusConnection;
  adminCommentConnection: CommentConnection;
  adminDailyStatisticConnection: DailyStatisticConnection;
  adminMixinMessageConnection: MixinMessageConnection;
  adminMixinNetworkSnapshotConnection: MixinNetworkSnapshotConnection;
  adminOrderConnection: OrderConnection;
  adminPaymentConnection: PaymentConnection;
  adminPrsAccountConnection: PrsAccountConnection;
  adminPrsTransactionConnection: PrsTransactionConnection;
  adminSwapOrderConnection: SwapOrderConnection;
  adminTransferConnection: TransferConnection;
  adminUser?: Maybe<User>;
  adminUserConnection: UserConnection;
  adminWalletBalance: Array<Asset>;
  article?: Maybe<Article>;
  articleChart: Scalars['String'];
  articleConnection: ArticleConnection;
  commentConnection: CommentConnection;
  createdAt: Scalars['ISO8601DateTime'];
  myAccessTokenConnection: AccessTokenConnection;
  myArticle?: Maybe<Article>;
  myArticleConnection: ArticleConnection;
  myArticleOrderConnection?: Maybe<OrderConnection>;
  myAuthoringSubscriptionConnection: UserConnection;
  myCommentingSubscriptionConnection: ArticleConnection;
  myNotificationConnection: NotificationConnection;
  myNotificationSetting: NotificationSetting;
  myPaymentConnection: PaymentConnection;
  myReadingSubscriptionConnection: UserConnection;
  myStatistics: UserStatistics;
  mySwapOrderConnection: SwapOrderConnection;
  myTagSubscriptionConnection: TagConnection;
  myTransferConnection: TransferConnection;
  payment?: Maybe<Payment>;
  pricableCurrencies: Array<Currency>;
  revenueChart: Scalars['String'];
  statistics: Statistics;
  swapPreOrder?: Maybe<SwapPreOrder>;
  swappableCurrencies: Array<Currency>;
  tag?: Maybe<Tag>;
  tagConnection: TagConnection;
  transferConnection: TransferConnection;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  user?: Maybe<User>;
  userArticleConnection: ArticleConnection;
  userChart: Scalars['String'];
};


export type QueryAdminAnnouncementConnectionArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryAdminArticleArgs = {
  uuid: Scalars['ID'];
};


export type QueryAdminArticleConnectionArgs = {
  authorMixinUuid?: Maybe<Scalars['ID']>;
  query?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryAdminArticleSnapshotConnectionArgs = {
  articleUuid?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  query?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryAdminBonusConnectionArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryAdminCommentConnectionArgs = {
  commentableType?: Maybe<Scalars['String']>;
  commentableId?: Maybe<Scalars['ID']>;
  authorMixinUuid?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryAdminDailyStatisticConnectionArgs = {
  startDate?: Maybe<Scalars['String']>;
  endDate?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryAdminMixinMessageConnectionArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryAdminMixinNetworkSnapshotConnectionArgs = {
  userId?: Maybe<Scalars['String']>;
  filter?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryAdminOrderConnectionArgs = {
  itemId?: Maybe<Scalars['ID']>;
  itemType?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryAdminPaymentConnectionArgs = {
  after?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  payerMixinUuid?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryAdminPrsAccountConnectionArgs = {
  query?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryAdminPrsTransactionConnectionArgs = {
  type?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryAdminSwapOrderConnectionArgs = {
  state?: Maybe<Scalars['String']>;
  payerMixinUuid?: Maybe<Scalars['ID']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryAdminTransferConnectionArgs = {
  itemId?: Maybe<Scalars['ID']>;
  itemType?: Maybe<Scalars['String']>;
  sourceId?: Maybe<Scalars['ID']>;
  sourceType?: Maybe<Scalars['String']>;
  transferType?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryAdminUserArgs = {
  mixinId: Scalars['ID'];
};


export type QueryAdminUserConnectionArgs = {
  query?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Scalars['String']>;
  filter?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryAdminWalletBalanceArgs = {
  userId?: Maybe<Scalars['String']>;
};


export type QueryArticleArgs = {
  uuid: Scalars['ID'];
};


export type QueryArticleConnectionArgs = {
  query?: Maybe<Scalars['String']>;
  tagId?: Maybe<Scalars['ID']>;
  after?: Maybe<Scalars['String']>;
  filter: Scalars['String'];
  timeRange?: Maybe<Scalars['String']>;
  tag?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryCommentConnectionArgs = {
  commentableType?: Maybe<Scalars['String']>;
  commentableId?: Maybe<Scalars['ID']>;
  authorMixinId?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryMyAccessTokenConnectionArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryMyArticleArgs = {
  uuid: Scalars['ID'];
};


export type QueryMyArticleConnectionArgs = {
  type: Scalars['String'];
  query?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryMyArticleOrderConnectionArgs = {
  uuid: Scalars['ID'];
  orderType: Scalars['String'];
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryMyAuthoringSubscriptionConnectionArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryMyCommentingSubscriptionConnectionArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryMyNotificationConnectionArgs = {
  after?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryMyPaymentConnectionArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryMyReadingSubscriptionConnectionArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryMySwapOrderConnectionArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryMyTagSubscriptionConnectionArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryMyTransferConnectionArgs = {
  after?: Maybe<Scalars['String']>;
  transferType?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryPaymentArgs = {
  traceId: Scalars['ID'];
};


export type QuerySwapPreOrderArgs = {
  payAssetId: Scalars['String'];
  fillAssetId: Scalars['String'];
  amount: Scalars['Float'];
};


export type QueryTagArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
};


export type QueryTagConnectionArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryTransferConnectionArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryUserArgs = {
  mixinId: Scalars['ID'];
};


export type QueryUserArticleConnectionArgs = {
  mixinId: Scalars['ID'];
  type: Scalars['String'];
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

/** Autogenerated input type of ReadNotificationMutation */
export type ReadNotificationMutationInput = {
  id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of ReadNotificationsMutation */
export type ReadNotificationsMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

export type Statistics = {
  __typename?: 'Statistics';
  articlesCount: Scalars['Int'];
  authorRevenueTotal: Scalars['Float'];
  createdAt: Scalars['ISO8601DateTime'];
  readerRevenueTotal: Scalars['Float'];
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  usersCount: Scalars['Int'];
};

export type SwapOrder = {
  __typename?: 'SwapOrder';
  amount?: Maybe<Scalars['Float']>;
  article?: Maybe<Article>;
  createdAt: Scalars['ISO8601DateTime'];
  fillAsset: Currency;
  fillAssetId: Scalars['String'];
  funds?: Maybe<Scalars['Float']>;
  id: Scalars['ID'];
  minAmount?: Maybe<Scalars['Float']>;
  payAsset: Currency;
  payAssetId: Scalars['String'];
  payer: User;
  payment: Payment;
  state: Scalars['String'];
  traceId: Scalars['ID'];
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

/** The connection type for SwapOrder. */
export type SwapOrderConnection = {
  __typename?: 'SwapOrderConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SwapOrderEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<SwapOrder>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Total # of objects returned from this Plural Query */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type SwapOrderEdge = {
  __typename?: 'SwapOrderEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<SwapOrder>;
};

export type SwapPreOrder = {
  __typename?: 'SwapPreOrder';
  amount: Scalars['Float'];
  createdAt: Scalars['ISO8601DateTime'];
  fillAssetId: Scalars['String'];
  funds: Scalars['Float'];
  minAmount: Scalars['Float'];
  payAssetId: Scalars['String'];
  priceImpact?: Maybe<Scalars['Float']>;
  routePrice?: Maybe<Scalars['Float']>;
  state: Scalars['String'];
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

/** Autogenerated input type of SwitchLocaleMutation */
export type SwitchLocaleMutationInput = {
  locale: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

export type Tag = {
  __typename?: 'Tag';
  articlesCount: Scalars['Int'];
  color?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  subscribed?: Maybe<Scalars['Boolean']>;
  subscribersCount: Scalars['Int'];
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

/** The connection type for Tag. */
export type TagConnection = {
  __typename?: 'TagConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<TagEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Tag>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Total # of objects returned from this Plural Query */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type TagEdge = {
  __typename?: 'TagEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Tag>;
};

/** Autogenerated input type of ToggleAuthoringSubscribeUserActionMutation */
export type ToggleAuthoringSubscribeUserActionMutationInput = {
  mixinId: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of ToggleAuthoringSubscribeUserActionMutation */
export type ToggleAuthoringSubscribeUserActionMutationPayload = {
  __typename?: 'ToggleAuthoringSubscribeUserActionMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  error?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

/** Autogenerated input type of ToggleCommentingSubscribeArticleActionMutation */
export type ToggleCommentingSubscribeArticleActionMutationInput = {
  uuid: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of ToggleReadingSubscribeUserActionMutation */
export type ToggleReadingSubscribeUserActionMutationInput = {
  mixinId: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of ToggleReadingSubscribeUserActionMutation */
export type ToggleReadingSubscribeUserActionMutationPayload = {
  __typename?: 'ToggleReadingSubscribeUserActionMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  error?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

/** Autogenerated input type of ToggleSubscribeTagActionMutation */
export type ToggleSubscribeTagActionMutationInput = {
  id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

export type Transfer = {
  __typename?: 'Transfer';
  amount: Scalars['Float'];
  article?: Maybe<Article>;
  assetId: Scalars['String'];
  createdAt: Scalars['ISO8601DateTime'];
  currency?: Maybe<Currency>;
  memo?: Maybe<Scalars['String']>;
  opponentId?: Maybe<Scalars['String']>;
  processedAt?: Maybe<Scalars['ISO8601DateTime']>;
  recipient?: Maybe<User>;
  snapshotId?: Maybe<Scalars['String']>;
  traceId: Scalars['ID'];
  transferType: Scalars['String'];
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  walletId?: Maybe<Scalars['String']>;
};

/** The connection type for Transfer. */
export type TransferConnection = {
  __typename?: 'TransferConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<TransferEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Transfer>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Total # of objects returned from this Plural Query */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type TransferEdge = {
  __typename?: 'TransferEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Transfer>;
};

/** Autogenerated input type of UpdateArticleMutation */
export type UpdateArticleMutationInput = {
  uuid: Scalars['ID'];
  title?: Maybe<Scalars['String']>;
  intro?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  tagNames?: Maybe<Array<Scalars['String']>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateNotificationSettingMutation */
export type UpdateNotificationSettingMutationInput = {
  webhookUrl?: Maybe<Scalars['String']>;
  articlePublishedWeb?: Maybe<Scalars['Boolean']>;
  articlePublishedMixinBot?: Maybe<Scalars['Boolean']>;
  articlePublishedWebhook?: Maybe<Scalars['Boolean']>;
  articleBoughtWeb?: Maybe<Scalars['Boolean']>;
  articleBoughtMixinBot?: Maybe<Scalars['Boolean']>;
  articleBoughtWebhook?: Maybe<Scalars['Boolean']>;
  articleRewardedWeb?: Maybe<Scalars['Boolean']>;
  articleRewardedMixinBot?: Maybe<Scalars['Boolean']>;
  articleRewardedWebhook?: Maybe<Scalars['Boolean']>;
  commentCreatedWeb?: Maybe<Scalars['Boolean']>;
  commentCreatedMixinBot?: Maybe<Scalars['Boolean']>;
  commentCreatedWebhook?: Maybe<Scalars['Boolean']>;
  taggingCreatedWeb?: Maybe<Scalars['Boolean']>;
  taggingCreatedMixinBot?: Maybe<Scalars['Boolean']>;
  taggingCreatedWebhook?: Maybe<Scalars['Boolean']>;
  transferProcessedWeb?: Maybe<Scalars['Boolean']>;
  transferProcessedMixinBot?: Maybe<Scalars['Boolean']>;
  transferProcessedWebhook?: Maybe<Scalars['Boolean']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpvoteArticleMutation */
export type UpvoteArticleMutationInput = {
  uuid: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpvoteCommentMutation */
export type UpvoteCommentMutationInput = {
  id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

export type User = {
  __typename?: 'User';
  accessable?: Maybe<Scalars['Boolean']>;
  articles: ArticleConnection;
  authoringSubscribed?: Maybe<Scalars['Boolean']>;
  authoringSubscribersCount: Scalars['Int'];
  avatar: Scalars['String'];
  avatarUrl: Scalars['String'];
  bannedAt?: Maybe<Scalars['ISO8601DateTime']>;
  bio?: Maybe<Scalars['String']>;
  comments: CommentConnection;
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  locale?: Maybe<Scalars['String']>;
  mixinAuthorizationValid?: Maybe<Scalars['Boolean']>;
  mixinId: Scalars['ID'];
  mixinUuid: Scalars['String'];
  name: Scalars['String'];
  phone?: Maybe<Scalars['String']>;
  prsAccount?: Maybe<PrsAccount>;
  readingSubscribed?: Maybe<Scalars['Boolean']>;
  readingSubscribersCount: Scalars['Int'];
  statistics: UserStatistics;
  unreadNotificationsCount: Scalars['Int'];
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  walletId?: Maybe<Scalars['String']>;
};


export type UserArticlesArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type UserCommentsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

/** The connection type for User. */
export type UserConnection = {
  __typename?: 'UserConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<UserEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<User>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Total # of objects returned from this Plural Query */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type UserEdge = {
  __typename?: 'UserEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<User>;
};

export type UserStatistics = {
  __typename?: 'UserStatistics';
  articlesCount?: Maybe<Scalars['Int']>;
  authorRevenueTotalBtc?: Maybe<Scalars['Float']>;
  authorRevenueTotalPrs?: Maybe<Scalars['Float']>;
  authorRevenueTotalUsd?: Maybe<Scalars['Float']>;
  boughtArticlesCount?: Maybe<Scalars['Int']>;
  commentsCount?: Maybe<Scalars['Int']>;
  createdAt: Scalars['ISO8601DateTime'];
  paymentTotalBtc?: Maybe<Scalars['Float']>;
  paymentTotalPrs?: Maybe<Scalars['Float']>;
  paymentTotalUsd?: Maybe<Scalars['Float']>;
  readerRevenueTotalBtc?: Maybe<Scalars['Float']>;
  readerRevenueTotalPrs?: Maybe<Scalars['Float']>;
  readerRevenueTotalUsd?: Maybe<Scalars['Float']>;
  revenueTotalBtc?: Maybe<Scalars['Float']>;
  revenueTotalPrs?: Maybe<Scalars['Float']>;
  revenueTotalUsd?: Maybe<Scalars['Float']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};


export const AdminBanUserDocument = gql`
    mutation AdminBanUser($input: AdminBanUserMutationInput!) {
  adminBanUser(input: $input) {
    id
    bannedAt
  }
}
    `;
export type AdminBanUserMutationFn = Apollo.MutationFunction<AdminBanUserMutation, AdminBanUserMutationVariables>;

/**
 * __useAdminBanUserMutation__
 *
 * To run a mutation, you first call `useAdminBanUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAdminBanUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [adminBanUserMutation, { data, loading, error }] = useAdminBanUserMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAdminBanUserMutation(baseOptions?: Apollo.MutationHookOptions<AdminBanUserMutation, AdminBanUserMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<AdminBanUserMutation, AdminBanUserMutationVariables>(AdminBanUserDocument, options);
      }
export type AdminBanUserMutationHookResult = ReturnType<typeof useAdminBanUserMutation>;
export type AdminBanUserMutationResult = Apollo.MutationResult<AdminBanUserMutation>;
export type AdminBanUserMutationOptions = Apollo.BaseMutationOptions<AdminBanUserMutation, AdminBanUserMutationVariables>;
export const AdminBlockArticleDocument = gql`
    mutation AdminBlockArticle($input: AdminBlockArticleMutationInput!) {
  adminBlockArticle(input: $input) {
    id
    uuid
    state
  }
}
    `;
export type AdminBlockArticleMutationFn = Apollo.MutationFunction<AdminBlockArticleMutation, AdminBlockArticleMutationVariables>;

/**
 * __useAdminBlockArticleMutation__
 *
 * To run a mutation, you first call `useAdminBlockArticleMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAdminBlockArticleMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [adminBlockArticleMutation, { data, loading, error }] = useAdminBlockArticleMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAdminBlockArticleMutation(baseOptions?: Apollo.MutationHookOptions<AdminBlockArticleMutation, AdminBlockArticleMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<AdminBlockArticleMutation, AdminBlockArticleMutationVariables>(AdminBlockArticleDocument, options);
      }
export type AdminBlockArticleMutationHookResult = ReturnType<typeof useAdminBlockArticleMutation>;
export type AdminBlockArticleMutationResult = Apollo.MutationResult<AdminBlockArticleMutation>;
export type AdminBlockArticleMutationOptions = Apollo.BaseMutationOptions<AdminBlockArticleMutation, AdminBlockArticleMutationVariables>;
export const AdminCreateAnouncementDocument = gql`
    mutation AdminCreateAnouncement($input: AdminCreateAnnouncementMutationInput!) {
  adminCreateAnnouncement(input: $input) {
    error
    success
  }
}
    `;
export type AdminCreateAnouncementMutationFn = Apollo.MutationFunction<AdminCreateAnouncementMutation, AdminCreateAnouncementMutationVariables>;

/**
 * __useAdminCreateAnouncementMutation__
 *
 * To run a mutation, you first call `useAdminCreateAnouncementMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAdminCreateAnouncementMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [adminCreateAnouncementMutation, { data, loading, error }] = useAdminCreateAnouncementMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAdminCreateAnouncementMutation(baseOptions?: Apollo.MutationHookOptions<AdminCreateAnouncementMutation, AdminCreateAnouncementMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<AdminCreateAnouncementMutation, AdminCreateAnouncementMutationVariables>(AdminCreateAnouncementDocument, options);
      }
export type AdminCreateAnouncementMutationHookResult = ReturnType<typeof useAdminCreateAnouncementMutation>;
export type AdminCreateAnouncementMutationResult = Apollo.MutationResult<AdminCreateAnouncementMutation>;
export type AdminCreateAnouncementMutationOptions = Apollo.BaseMutationOptions<AdminCreateAnouncementMutation, AdminCreateAnouncementMutationVariables>;
export const AdminCreateBonusDocument = gql`
    mutation AdminCreateBonus($input: AdminCreateBonusMutationInput!) {
  adminCreateBonus(input: $input) {
    error
  }
}
    `;
export type AdminCreateBonusMutationFn = Apollo.MutationFunction<AdminCreateBonusMutation, AdminCreateBonusMutationVariables>;

/**
 * __useAdminCreateBonusMutation__
 *
 * To run a mutation, you first call `useAdminCreateBonusMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAdminCreateBonusMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [adminCreateBonusMutation, { data, loading, error }] = useAdminCreateBonusMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAdminCreateBonusMutation(baseOptions?: Apollo.MutationHookOptions<AdminCreateBonusMutation, AdminCreateBonusMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<AdminCreateBonusMutation, AdminCreateBonusMutationVariables>(AdminCreateBonusDocument, options);
      }
export type AdminCreateBonusMutationHookResult = ReturnType<typeof useAdminCreateBonusMutation>;
export type AdminCreateBonusMutationResult = Apollo.MutationResult<AdminCreateBonusMutation>;
export type AdminCreateBonusMutationOptions = Apollo.BaseMutationOptions<AdminCreateBonusMutation, AdminCreateBonusMutationVariables>;
export const AdminDeleteAnouncementDocument = gql`
    mutation AdminDeleteAnouncement($input: AdminDeleteAnnouncementMutationInput!) {
  adminDeleteAnnouncement(input: $input) {
    error
    success
  }
}
    `;
export type AdminDeleteAnouncementMutationFn = Apollo.MutationFunction<AdminDeleteAnouncementMutation, AdminDeleteAnouncementMutationVariables>;

/**
 * __useAdminDeleteAnouncementMutation__
 *
 * To run a mutation, you first call `useAdminDeleteAnouncementMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAdminDeleteAnouncementMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [adminDeleteAnouncementMutation, { data, loading, error }] = useAdminDeleteAnouncementMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAdminDeleteAnouncementMutation(baseOptions?: Apollo.MutationHookOptions<AdminDeleteAnouncementMutation, AdminDeleteAnouncementMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<AdminDeleteAnouncementMutation, AdminDeleteAnouncementMutationVariables>(AdminDeleteAnouncementDocument, options);
      }
export type AdminDeleteAnouncementMutationHookResult = ReturnType<typeof useAdminDeleteAnouncementMutation>;
export type AdminDeleteAnouncementMutationResult = Apollo.MutationResult<AdminDeleteAnouncementMutation>;
export type AdminDeleteAnouncementMutationOptions = Apollo.BaseMutationOptions<AdminDeleteAnouncementMutation, AdminDeleteAnouncementMutationVariables>;
export const AdminDeleteCommentDocument = gql`
    mutation AdminDeleteComment($input: AdminDeleteCommentMutationInput!) {
  adminDeleteComment(input: $input) {
    error
    success
  }
}
    `;
export type AdminDeleteCommentMutationFn = Apollo.MutationFunction<AdminDeleteCommentMutation, AdminDeleteCommentMutationVariables>;

/**
 * __useAdminDeleteCommentMutation__
 *
 * To run a mutation, you first call `useAdminDeleteCommentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAdminDeleteCommentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [adminDeleteCommentMutation, { data, loading, error }] = useAdminDeleteCommentMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAdminDeleteCommentMutation(baseOptions?: Apollo.MutationHookOptions<AdminDeleteCommentMutation, AdminDeleteCommentMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<AdminDeleteCommentMutation, AdminDeleteCommentMutationVariables>(AdminDeleteCommentDocument, options);
      }
export type AdminDeleteCommentMutationHookResult = ReturnType<typeof useAdminDeleteCommentMutation>;
export type AdminDeleteCommentMutationResult = Apollo.MutationResult<AdminDeleteCommentMutation>;
export type AdminDeleteCommentMutationOptions = Apollo.BaseMutationOptions<AdminDeleteCommentMutation, AdminDeleteCommentMutationVariables>;
export const AdminDeliverAnouncementDocument = gql`
    mutation AdminDeliverAnouncement($input: AdminDeliverAnnouncementMutationInput!) {
  adminDeliverAnnouncement(input: $input) {
    error
    success
  }
}
    `;
export type AdminDeliverAnouncementMutationFn = Apollo.MutationFunction<AdminDeliverAnouncementMutation, AdminDeliverAnouncementMutationVariables>;

/**
 * __useAdminDeliverAnouncementMutation__
 *
 * To run a mutation, you first call `useAdminDeliverAnouncementMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAdminDeliverAnouncementMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [adminDeliverAnouncementMutation, { data, loading, error }] = useAdminDeliverAnouncementMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAdminDeliverAnouncementMutation(baseOptions?: Apollo.MutationHookOptions<AdminDeliverAnouncementMutation, AdminDeliverAnouncementMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<AdminDeliverAnouncementMutation, AdminDeliverAnouncementMutationVariables>(AdminDeliverAnouncementDocument, options);
      }
export type AdminDeliverAnouncementMutationHookResult = ReturnType<typeof useAdminDeliverAnouncementMutation>;
export type AdminDeliverAnouncementMutationResult = Apollo.MutationResult<AdminDeliverAnouncementMutation>;
export type AdminDeliverAnouncementMutationOptions = Apollo.BaseMutationOptions<AdminDeliverAnouncementMutation, AdminDeliverAnouncementMutationVariables>;
export const AdminDeliverBonusDocument = gql`
    mutation AdminDeliverBonus($input: AdminDeliverBonusMutationInput!) {
  adminDeliverBonus(input: $input) {
    id
    state
  }
}
    `;
export type AdminDeliverBonusMutationFn = Apollo.MutationFunction<AdminDeliverBonusMutation, AdminDeliverBonusMutationVariables>;

/**
 * __useAdminDeliverBonusMutation__
 *
 * To run a mutation, you first call `useAdminDeliverBonusMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAdminDeliverBonusMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [adminDeliverBonusMutation, { data, loading, error }] = useAdminDeliverBonusMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAdminDeliverBonusMutation(baseOptions?: Apollo.MutationHookOptions<AdminDeliverBonusMutation, AdminDeliverBonusMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<AdminDeliverBonusMutation, AdminDeliverBonusMutationVariables>(AdminDeliverBonusDocument, options);
      }
export type AdminDeliverBonusMutationHookResult = ReturnType<typeof useAdminDeliverBonusMutation>;
export type AdminDeliverBonusMutationResult = Apollo.MutationResult<AdminDeliverBonusMutation>;
export type AdminDeliverBonusMutationOptions = Apollo.BaseMutationOptions<AdminDeliverBonusMutation, AdminDeliverBonusMutationVariables>;
export const AdminLoginDocument = gql`
    mutation AdminLogin($input: AdminLoginMutationInput!) {
  adminLogin(input: $input) {
    error
    success
  }
}
    `;
export type AdminLoginMutationFn = Apollo.MutationFunction<AdminLoginMutation, AdminLoginMutationVariables>;

/**
 * __useAdminLoginMutation__
 *
 * To run a mutation, you first call `useAdminLoginMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAdminLoginMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [adminLoginMutation, { data, loading, error }] = useAdminLoginMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAdminLoginMutation(baseOptions?: Apollo.MutationHookOptions<AdminLoginMutation, AdminLoginMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<AdminLoginMutation, AdminLoginMutationVariables>(AdminLoginDocument, options);
      }
export type AdminLoginMutationHookResult = ReturnType<typeof useAdminLoginMutation>;
export type AdminLoginMutationResult = Apollo.MutationResult<AdminLoginMutation>;
export type AdminLoginMutationOptions = Apollo.BaseMutationOptions<AdminLoginMutation, AdminLoginMutationVariables>;
export const AdminPreviewAnouncementDocument = gql`
    mutation AdminPreviewAnouncement($input: AdminPreviewAnnouncementMutationInput!) {
  adminPreviewAnnouncement(input: $input) {
    error
    success
  }
}
    `;
export type AdminPreviewAnouncementMutationFn = Apollo.MutationFunction<AdminPreviewAnouncementMutation, AdminPreviewAnouncementMutationVariables>;

/**
 * __useAdminPreviewAnouncementMutation__
 *
 * To run a mutation, you first call `useAdminPreviewAnouncementMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAdminPreviewAnouncementMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [adminPreviewAnouncementMutation, { data, loading, error }] = useAdminPreviewAnouncementMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAdminPreviewAnouncementMutation(baseOptions?: Apollo.MutationHookOptions<AdminPreviewAnouncementMutation, AdminPreviewAnouncementMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<AdminPreviewAnouncementMutation, AdminPreviewAnouncementMutationVariables>(AdminPreviewAnouncementDocument, options);
      }
export type AdminPreviewAnouncementMutationHookResult = ReturnType<typeof useAdminPreviewAnouncementMutation>;
export type AdminPreviewAnouncementMutationResult = Apollo.MutationResult<AdminPreviewAnouncementMutation>;
export type AdminPreviewAnouncementMutationOptions = Apollo.BaseMutationOptions<AdminPreviewAnouncementMutation, AdminPreviewAnouncementMutationVariables>;
export const AdminRecoverCommentDocument = gql`
    mutation AdminRecoverComment($input: AdminRecoverCommentMutationInput!) {
  adminRecoverComment(input: $input) {
    error
    success
  }
}
    `;
export type AdminRecoverCommentMutationFn = Apollo.MutationFunction<AdminRecoverCommentMutation, AdminRecoverCommentMutationVariables>;

/**
 * __useAdminRecoverCommentMutation__
 *
 * To run a mutation, you first call `useAdminRecoverCommentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAdminRecoverCommentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [adminRecoverCommentMutation, { data, loading, error }] = useAdminRecoverCommentMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAdminRecoverCommentMutation(baseOptions?: Apollo.MutationHookOptions<AdminRecoverCommentMutation, AdminRecoverCommentMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<AdminRecoverCommentMutation, AdminRecoverCommentMutationVariables>(AdminRecoverCommentDocument, options);
      }
export type AdminRecoverCommentMutationHookResult = ReturnType<typeof useAdminRecoverCommentMutation>;
export type AdminRecoverCommentMutationResult = Apollo.MutationResult<AdminRecoverCommentMutation>;
export type AdminRecoverCommentMutationOptions = Apollo.BaseMutationOptions<AdminRecoverCommentMutation, AdminRecoverCommentMutationVariables>;
export const AdminSignArticleSnapshotDocument = gql`
    mutation AdminSignArticleSnapshot($input: AdminSignArticleSnapshotMutationInput!) {
  adminSignArticleSnapshot(input: $input) {
    id
    state
    requestedAt
    signedAt
  }
}
    `;
export type AdminSignArticleSnapshotMutationFn = Apollo.MutationFunction<AdminSignArticleSnapshotMutation, AdminSignArticleSnapshotMutationVariables>;

/**
 * __useAdminSignArticleSnapshotMutation__
 *
 * To run a mutation, you first call `useAdminSignArticleSnapshotMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAdminSignArticleSnapshotMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [adminSignArticleSnapshotMutation, { data, loading, error }] = useAdminSignArticleSnapshotMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAdminSignArticleSnapshotMutation(baseOptions?: Apollo.MutationHookOptions<AdminSignArticleSnapshotMutation, AdminSignArticleSnapshotMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<AdminSignArticleSnapshotMutation, AdminSignArticleSnapshotMutationVariables>(AdminSignArticleSnapshotDocument, options);
      }
export type AdminSignArticleSnapshotMutationHookResult = ReturnType<typeof useAdminSignArticleSnapshotMutation>;
export type AdminSignArticleSnapshotMutationResult = Apollo.MutationResult<AdminSignArticleSnapshotMutation>;
export type AdminSignArticleSnapshotMutationOptions = Apollo.BaseMutationOptions<AdminSignArticleSnapshotMutation, AdminSignArticleSnapshotMutationVariables>;
export const AdminUnbanUserDocument = gql`
    mutation AdminUnbanUser($input: AdminUnbanUserMutationInput!) {
  adminUnbanUser(input: $input) {
    id
    bannedAt
  }
}
    `;
export type AdminUnbanUserMutationFn = Apollo.MutationFunction<AdminUnbanUserMutation, AdminUnbanUserMutationVariables>;

/**
 * __useAdminUnbanUserMutation__
 *
 * To run a mutation, you first call `useAdminUnbanUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAdminUnbanUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [adminUnbanUserMutation, { data, loading, error }] = useAdminUnbanUserMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAdminUnbanUserMutation(baseOptions?: Apollo.MutationHookOptions<AdminUnbanUserMutation, AdminUnbanUserMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<AdminUnbanUserMutation, AdminUnbanUserMutationVariables>(AdminUnbanUserDocument, options);
      }
export type AdminUnbanUserMutationHookResult = ReturnType<typeof useAdminUnbanUserMutation>;
export type AdminUnbanUserMutationResult = Apollo.MutationResult<AdminUnbanUserMutation>;
export type AdminUnbanUserMutationOptions = Apollo.BaseMutationOptions<AdminUnbanUserMutation, AdminUnbanUserMutationVariables>;
export const AdminUnblockArticleDocument = gql`
    mutation AdminUnblockArticle($input: AdminUnblockArticleMutationInput!) {
  adminUnblockArticle(input: $input) {
    id
    uuid
    state
  }
}
    `;
export type AdminUnblockArticleMutationFn = Apollo.MutationFunction<AdminUnblockArticleMutation, AdminUnblockArticleMutationVariables>;

/**
 * __useAdminUnblockArticleMutation__
 *
 * To run a mutation, you first call `useAdminUnblockArticleMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAdminUnblockArticleMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [adminUnblockArticleMutation, { data, loading, error }] = useAdminUnblockArticleMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAdminUnblockArticleMutation(baseOptions?: Apollo.MutationHookOptions<AdminUnblockArticleMutation, AdminUnblockArticleMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<AdminUnblockArticleMutation, AdminUnblockArticleMutationVariables>(AdminUnblockArticleDocument, options);
      }
export type AdminUnblockArticleMutationHookResult = ReturnType<typeof useAdminUnblockArticleMutation>;
export type AdminUnblockArticleMutationResult = Apollo.MutationResult<AdminUnblockArticleMutation>;
export type AdminUnblockArticleMutationOptions = Apollo.BaseMutationOptions<AdminUnblockArticleMutation, AdminUnblockArticleMutationVariables>;
export const AdminUpdateAnouncementDocument = gql`
    mutation AdminUpdateAnouncement($input: AdminUpdateAnnouncementMutationInput!) {
  adminUpdateAnnouncement(input: $input) {
    error
    success
  }
}
    `;
export type AdminUpdateAnouncementMutationFn = Apollo.MutationFunction<AdminUpdateAnouncementMutation, AdminUpdateAnouncementMutationVariables>;

/**
 * __useAdminUpdateAnouncementMutation__
 *
 * To run a mutation, you first call `useAdminUpdateAnouncementMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAdminUpdateAnouncementMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [adminUpdateAnouncementMutation, { data, loading, error }] = useAdminUpdateAnouncementMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAdminUpdateAnouncementMutation(baseOptions?: Apollo.MutationHookOptions<AdminUpdateAnouncementMutation, AdminUpdateAnouncementMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<AdminUpdateAnouncementMutation, AdminUpdateAnouncementMutationVariables>(AdminUpdateAnouncementDocument, options);
      }
export type AdminUpdateAnouncementMutationHookResult = ReturnType<typeof useAdminUpdateAnouncementMutation>;
export type AdminUpdateAnouncementMutationResult = Apollo.MutationResult<AdminUpdateAnouncementMutation>;
export type AdminUpdateAnouncementMutationOptions = Apollo.BaseMutationOptions<AdminUpdateAnouncementMutation, AdminUpdateAnouncementMutationVariables>;
export const AdminUpdateBonusDocument = gql`
    mutation AdminUpdateBonus($input: AdminUpdateBonusMutationInput!) {
  adminUpdateBonus(input: $input) {
    error
  }
}
    `;
export type AdminUpdateBonusMutationFn = Apollo.MutationFunction<AdminUpdateBonusMutation, AdminUpdateBonusMutationVariables>;

/**
 * __useAdminUpdateBonusMutation__
 *
 * To run a mutation, you first call `useAdminUpdateBonusMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAdminUpdateBonusMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [adminUpdateBonusMutation, { data, loading, error }] = useAdminUpdateBonusMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAdminUpdateBonusMutation(baseOptions?: Apollo.MutationHookOptions<AdminUpdateBonusMutation, AdminUpdateBonusMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<AdminUpdateBonusMutation, AdminUpdateBonusMutationVariables>(AdminUpdateBonusDocument, options);
      }
export type AdminUpdateBonusMutationHookResult = ReturnType<typeof useAdminUpdateBonusMutation>;
export type AdminUpdateBonusMutationResult = Apollo.MutationResult<AdminUpdateBonusMutation>;
export type AdminUpdateBonusMutationOptions = Apollo.BaseMutationOptions<AdminUpdateBonusMutation, AdminUpdateBonusMutationVariables>;
export const AdminWithdrawBalanceDocument = gql`
    mutation AdminWithdrawBalance($input: AdminWithdrawBalanceMutationInput!) {
  adminWithdrawBalance(input: $input)
}
    `;
export type AdminWithdrawBalanceMutationFn = Apollo.MutationFunction<AdminWithdrawBalanceMutation, AdminWithdrawBalanceMutationVariables>;

/**
 * __useAdminWithdrawBalanceMutation__
 *
 * To run a mutation, you first call `useAdminWithdrawBalanceMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAdminWithdrawBalanceMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [adminWithdrawBalanceMutation, { data, loading, error }] = useAdminWithdrawBalanceMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAdminWithdrawBalanceMutation(baseOptions?: Apollo.MutationHookOptions<AdminWithdrawBalanceMutation, AdminWithdrawBalanceMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<AdminWithdrawBalanceMutation, AdminWithdrawBalanceMutationVariables>(AdminWithdrawBalanceDocument, options);
      }
export type AdminWithdrawBalanceMutationHookResult = ReturnType<typeof useAdminWithdrawBalanceMutation>;
export type AdminWithdrawBalanceMutationResult = Apollo.MutationResult<AdminWithdrawBalanceMutation>;
export type AdminWithdrawBalanceMutationOptions = Apollo.BaseMutationOptions<AdminWithdrawBalanceMutation, AdminWithdrawBalanceMutationVariables>;
export const AdminAnnouncementConnectionDocument = gql`
    query AdminAnnouncementConnection($after: String) {
  adminAnnouncementConnection(after: $after) {
    nodes {
      id
      content
      state
      messageType
      createdAt
      deliveredAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useAdminAnnouncementConnectionQuery__
 *
 * To run a query within a React component, call `useAdminAnnouncementConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminAnnouncementConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminAnnouncementConnectionQuery({
 *   variables: {
 *      after: // value for 'after'
 *   },
 * });
 */
export function useAdminAnnouncementConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminAnnouncementConnectionQuery, AdminAnnouncementConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminAnnouncementConnectionQuery, AdminAnnouncementConnectionQueryVariables>(AdminAnnouncementConnectionDocument, options);
      }
export function useAdminAnnouncementConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminAnnouncementConnectionQuery, AdminAnnouncementConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminAnnouncementConnectionQuery, AdminAnnouncementConnectionQueryVariables>(AdminAnnouncementConnectionDocument, options);
        }
export type AdminAnnouncementConnectionQueryHookResult = ReturnType<typeof useAdminAnnouncementConnectionQuery>;
export type AdminAnnouncementConnectionLazyQueryHookResult = ReturnType<typeof useAdminAnnouncementConnectionLazyQuery>;
export type AdminAnnouncementConnectionQueryResult = Apollo.QueryResult<AdminAnnouncementConnectionQuery, AdminAnnouncementConnectionQueryVariables>;
export const ArticleChartDocument = gql`
    query ArticleChart {
  articleChart
}
    `;

/**
 * __useArticleChartQuery__
 *
 * To run a query within a React component, call `useArticleChartQuery` and pass it any options that fit your needs.
 * When your component renders, `useArticleChartQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useArticleChartQuery({
 *   variables: {
 *   },
 * });
 */
export function useArticleChartQuery(baseOptions?: Apollo.QueryHookOptions<ArticleChartQuery, ArticleChartQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ArticleChartQuery, ArticleChartQueryVariables>(ArticleChartDocument, options);
      }
export function useArticleChartLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ArticleChartQuery, ArticleChartQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ArticleChartQuery, ArticleChartQueryVariables>(ArticleChartDocument, options);
        }
export type ArticleChartQueryHookResult = ReturnType<typeof useArticleChartQuery>;
export type ArticleChartLazyQueryHookResult = ReturnType<typeof useArticleChartLazyQuery>;
export type ArticleChartQueryResult = Apollo.QueryResult<ArticleChartQuery, ArticleChartQueryVariables>;
export const AdminArticleConnectionDocument = gql`
    query AdminArticleConnection($authorMixinUuid: ID, $query: String, $state: String, $after: String) {
  adminArticleConnection(
    authorMixinUuid: $authorMixinUuid
    query: $query
    state: $state
    after: $after
  ) {
    nodes {
      id
      uuid
      title
      intro
      price
      revenueUsd
      revenueBtc
      ordersCount
      commentsCount
      state
      wallet {
        name
        uuid
      }
      author {
        name
        avatar
      }
      currency {
        assetId
        symbol
        iconUrl
      }
      createdAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useAdminArticleConnectionQuery__
 *
 * To run a query within a React component, call `useAdminArticleConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminArticleConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminArticleConnectionQuery({
 *   variables: {
 *      authorMixinUuid: // value for 'authorMixinUuid'
 *      query: // value for 'query'
 *      state: // value for 'state'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useAdminArticleConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminArticleConnectionQuery, AdminArticleConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminArticleConnectionQuery, AdminArticleConnectionQueryVariables>(AdminArticleConnectionDocument, options);
      }
export function useAdminArticleConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminArticleConnectionQuery, AdminArticleConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminArticleConnectionQuery, AdminArticleConnectionQueryVariables>(AdminArticleConnectionDocument, options);
        }
export type AdminArticleConnectionQueryHookResult = ReturnType<typeof useAdminArticleConnectionQuery>;
export type AdminArticleConnectionLazyQueryHookResult = ReturnType<typeof useAdminArticleConnectionLazyQuery>;
export type AdminArticleConnectionQueryResult = Apollo.QueryResult<AdminArticleConnectionQuery, AdminArticleConnectionQueryVariables>;
export const AdminArticleSnapshotConnectionDocument = gql`
    query AdminArticleSnapshotConnection($articleUuid: String, $after: String, $state: String, $query: String) {
  adminArticleSnapshotConnection(
    articleUuid: $articleUuid
    after: $after
    state: $state
    query: $query
  ) {
    nodes {
      id
      state
      articleUuid
      fileHash
      txId
      signatureUrl
      article {
        uuid
        title
        author {
          name
        }
      }
      requestedAt
      signedAt
      createdAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useAdminArticleSnapshotConnectionQuery__
 *
 * To run a query within a React component, call `useAdminArticleSnapshotConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminArticleSnapshotConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminArticleSnapshotConnectionQuery({
 *   variables: {
 *      articleUuid: // value for 'articleUuid'
 *      after: // value for 'after'
 *      state: // value for 'state'
 *      query: // value for 'query'
 *   },
 * });
 */
export function useAdminArticleSnapshotConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminArticleSnapshotConnectionQuery, AdminArticleSnapshotConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminArticleSnapshotConnectionQuery, AdminArticleSnapshotConnectionQueryVariables>(AdminArticleSnapshotConnectionDocument, options);
      }
export function useAdminArticleSnapshotConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminArticleSnapshotConnectionQuery, AdminArticleSnapshotConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminArticleSnapshotConnectionQuery, AdminArticleSnapshotConnectionQueryVariables>(AdminArticleSnapshotConnectionDocument, options);
        }
export type AdminArticleSnapshotConnectionQueryHookResult = ReturnType<typeof useAdminArticleSnapshotConnectionQuery>;
export type AdminArticleSnapshotConnectionLazyQueryHookResult = ReturnType<typeof useAdminArticleSnapshotConnectionLazyQuery>;
export type AdminArticleSnapshotConnectionQueryResult = Apollo.QueryResult<AdminArticleSnapshotConnectionQuery, AdminArticleSnapshotConnectionQueryVariables>;
export const AdminArticleDocument = gql`
    query AdminArticle($uuid: ID!) {
  adminArticle(uuid: $uuid) {
    id
    uuid
    title
    intro
    price
    revenueUsd
    revenueBtc
    ordersCount
    commentsCount
    state
    walletId
    author {
      name
      avatar
    }
    createdAt
  }
}
    `;

/**
 * __useAdminArticleQuery__
 *
 * To run a query within a React component, call `useAdminArticleQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminArticleQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminArticleQuery({
 *   variables: {
 *      uuid: // value for 'uuid'
 *   },
 * });
 */
export function useAdminArticleQuery(baseOptions: Apollo.QueryHookOptions<AdminArticleQuery, AdminArticleQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminArticleQuery, AdminArticleQueryVariables>(AdminArticleDocument, options);
      }
export function useAdminArticleLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminArticleQuery, AdminArticleQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminArticleQuery, AdminArticleQueryVariables>(AdminArticleDocument, options);
        }
export type AdminArticleQueryHookResult = ReturnType<typeof useAdminArticleQuery>;
export type AdminArticleLazyQueryHookResult = ReturnType<typeof useAdminArticleLazyQuery>;
export type AdminArticleQueryResult = Apollo.QueryResult<AdminArticleQuery, AdminArticleQueryVariables>;
export const AdminBonusConnectionDocument = gql`
    query AdminBonusConnection($after: String) {
  adminBonusConnection(after: $after) {
    nodes {
      id
      title
      description
      amount
      assetId
      state
      createdAt
      currency {
        assetId
        symbol
      }
      user {
        id
        avatar
        name
        mixinId
      }
      transfer {
        snapshotId
      }
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useAdminBonusConnectionQuery__
 *
 * To run a query within a React component, call `useAdminBonusConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminBonusConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminBonusConnectionQuery({
 *   variables: {
 *      after: // value for 'after'
 *   },
 * });
 */
export function useAdminBonusConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminBonusConnectionQuery, AdminBonusConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminBonusConnectionQuery, AdminBonusConnectionQueryVariables>(AdminBonusConnectionDocument, options);
      }
export function useAdminBonusConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminBonusConnectionQuery, AdminBonusConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminBonusConnectionQuery, AdminBonusConnectionQueryVariables>(AdminBonusConnectionDocument, options);
        }
export type AdminBonusConnectionQueryHookResult = ReturnType<typeof useAdminBonusConnectionQuery>;
export type AdminBonusConnectionLazyQueryHookResult = ReturnType<typeof useAdminBonusConnectionLazyQuery>;
export type AdminBonusConnectionQueryResult = Apollo.QueryResult<AdminBonusConnectionQuery, AdminBonusConnectionQueryVariables>;
export const AdminCommentConnectionDocument = gql`
    query AdminCommentConnection($commentableType: String, $commentableId: ID, $authorMixinUuid: String, $after: String) {
  adminCommentConnection(
    commentableType: $commentableType
    commentableId: $commentableId
    authorMixinUuid: $authorMixinUuid
    after: $after
  ) {
    nodes {
      id
      content
      deletedAt
      upvotesCount
      downvotesCount
      upvoted
      downvoted
      author {
        name
        avatar
        mixinId
        bio
        createdAt
      }
      commentable {
        uuid
        title
      }
      createdAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useAdminCommentConnectionQuery__
 *
 * To run a query within a React component, call `useAdminCommentConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminCommentConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminCommentConnectionQuery({
 *   variables: {
 *      commentableType: // value for 'commentableType'
 *      commentableId: // value for 'commentableId'
 *      authorMixinUuid: // value for 'authorMixinUuid'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useAdminCommentConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminCommentConnectionQuery, AdminCommentConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminCommentConnectionQuery, AdminCommentConnectionQueryVariables>(AdminCommentConnectionDocument, options);
      }
export function useAdminCommentConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminCommentConnectionQuery, AdminCommentConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminCommentConnectionQuery, AdminCommentConnectionQueryVariables>(AdminCommentConnectionDocument, options);
        }
export type AdminCommentConnectionQueryHookResult = ReturnType<typeof useAdminCommentConnectionQuery>;
export type AdminCommentConnectionLazyQueryHookResult = ReturnType<typeof useAdminCommentConnectionLazyQuery>;
export type AdminCommentConnectionQueryResult = Apollo.QueryResult<AdminCommentConnectionQuery, AdminCommentConnectionQueryVariables>;
export const AdminDailyStatisticConnectionDocument = gql`
    query AdminDailyStatisticConnection($startDate: String, $endDate: String, $after: String) {
  adminDailyStatisticConnection(
    startDate: $startDate
    endDate: $endDate
    after: $after
  ) {
    nodes {
      date
      datetime
      newUsersCount
      paidUsersCount
      newPaymentsCount
      newPayersCount
      newArticlesCount
      createdAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useAdminDailyStatisticConnectionQuery__
 *
 * To run a query within a React component, call `useAdminDailyStatisticConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminDailyStatisticConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminDailyStatisticConnectionQuery({
 *   variables: {
 *      startDate: // value for 'startDate'
 *      endDate: // value for 'endDate'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useAdminDailyStatisticConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminDailyStatisticConnectionQuery, AdminDailyStatisticConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminDailyStatisticConnectionQuery, AdminDailyStatisticConnectionQueryVariables>(AdminDailyStatisticConnectionDocument, options);
      }
export function useAdminDailyStatisticConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminDailyStatisticConnectionQuery, AdminDailyStatisticConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminDailyStatisticConnectionQuery, AdminDailyStatisticConnectionQueryVariables>(AdminDailyStatisticConnectionDocument, options);
        }
export type AdminDailyStatisticConnectionQueryHookResult = ReturnType<typeof useAdminDailyStatisticConnectionQuery>;
export type AdminDailyStatisticConnectionLazyQueryHookResult = ReturnType<typeof useAdminDailyStatisticConnectionLazyQuery>;
export type AdminDailyStatisticConnectionQueryResult = Apollo.QueryResult<AdminDailyStatisticConnectionQuery, AdminDailyStatisticConnectionQueryVariables>;
export const AdminMixinMessageConnectionDocument = gql`
    query AdminMixinMessageConnection($after: String) {
  adminMixinMessageConnection(after: $after) {
    nodes {
      id
      action
      category
      content
      userId
      user {
        name
        avatar
      }
      createdAt
      processedAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useAdminMixinMessageConnectionQuery__
 *
 * To run a query within a React component, call `useAdminMixinMessageConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminMixinMessageConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminMixinMessageConnectionQuery({
 *   variables: {
 *      after: // value for 'after'
 *   },
 * });
 */
export function useAdminMixinMessageConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminMixinMessageConnectionQuery, AdminMixinMessageConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminMixinMessageConnectionQuery, AdminMixinMessageConnectionQueryVariables>(AdminMixinMessageConnectionDocument, options);
      }
export function useAdminMixinMessageConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminMixinMessageConnectionQuery, AdminMixinMessageConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminMixinMessageConnectionQuery, AdminMixinMessageConnectionQueryVariables>(AdminMixinMessageConnectionDocument, options);
        }
export type AdminMixinMessageConnectionQueryHookResult = ReturnType<typeof useAdminMixinMessageConnectionQuery>;
export type AdminMixinMessageConnectionLazyQueryHookResult = ReturnType<typeof useAdminMixinMessageConnectionLazyQuery>;
export type AdminMixinMessageConnectionQueryResult = Apollo.QueryResult<AdminMixinMessageConnectionQuery, AdminMixinMessageConnectionQueryVariables>;
export const AdminMixinNetworkSnapshotConnectionDocument = gql`
    query AdminMixinNetworkSnapshotConnection($filter: String, $userId: String, $after: String) {
  adminMixinNetworkSnapshotConnection(
    filter: $filter
    userId: $userId
    after: $after
  ) {
    nodes {
      id
      traceId
      snapshotId
      assetId
      userId
      amount
      data
      opponentId
      opponent {
        name
        avatar
        mixinId
      }
      article {
        id
        uuid
        title
      }
      createdAt
      processedAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useAdminMixinNetworkSnapshotConnectionQuery__
 *
 * To run a query within a React component, call `useAdminMixinNetworkSnapshotConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminMixinNetworkSnapshotConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminMixinNetworkSnapshotConnectionQuery({
 *   variables: {
 *      filter: // value for 'filter'
 *      userId: // value for 'userId'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useAdminMixinNetworkSnapshotConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminMixinNetworkSnapshotConnectionQuery, AdminMixinNetworkSnapshotConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminMixinNetworkSnapshotConnectionQuery, AdminMixinNetworkSnapshotConnectionQueryVariables>(AdminMixinNetworkSnapshotConnectionDocument, options);
      }
export function useAdminMixinNetworkSnapshotConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminMixinNetworkSnapshotConnectionQuery, AdminMixinNetworkSnapshotConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminMixinNetworkSnapshotConnectionQuery, AdminMixinNetworkSnapshotConnectionQueryVariables>(AdminMixinNetworkSnapshotConnectionDocument, options);
        }
export type AdminMixinNetworkSnapshotConnectionQueryHookResult = ReturnType<typeof useAdminMixinNetworkSnapshotConnectionQuery>;
export type AdminMixinNetworkSnapshotConnectionLazyQueryHookResult = ReturnType<typeof useAdminMixinNetworkSnapshotConnectionLazyQuery>;
export type AdminMixinNetworkSnapshotConnectionQueryResult = Apollo.QueryResult<AdminMixinNetworkSnapshotConnectionQuery, AdminMixinNetworkSnapshotConnectionQueryVariables>;
export const AdminOrderConnectionDocument = gql`
    query AdminOrderConnection($itemId: ID, $itemType: String, $state: String, $after: String) {
  adminOrderConnection(
    itemId: $itemId
    itemType: $itemType
    state: $state
    after: $after
  ) {
    nodes {
      id
      traceId
      orderType
      itemId
      itemType
      state
      total
      seller {
        name
        avatar
        mixinId
      }
      buyer {
        name
        avatar
        mixinId
      }
      currency {
        assetId
        iconUrl
        symbol
      }
      createdAt
      itemType
      item {
        ... on Article {
          title
          uuid
        }
      }
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useAdminOrderConnectionQuery__
 *
 * To run a query within a React component, call `useAdminOrderConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminOrderConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminOrderConnectionQuery({
 *   variables: {
 *      itemId: // value for 'itemId'
 *      itemType: // value for 'itemType'
 *      state: // value for 'state'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useAdminOrderConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminOrderConnectionQuery, AdminOrderConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminOrderConnectionQuery, AdminOrderConnectionQueryVariables>(AdminOrderConnectionDocument, options);
      }
export function useAdminOrderConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminOrderConnectionQuery, AdminOrderConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminOrderConnectionQuery, AdminOrderConnectionQueryVariables>(AdminOrderConnectionDocument, options);
        }
export type AdminOrderConnectionQueryHookResult = ReturnType<typeof useAdminOrderConnectionQuery>;
export type AdminOrderConnectionLazyQueryHookResult = ReturnType<typeof useAdminOrderConnectionLazyQuery>;
export type AdminOrderConnectionQueryResult = Apollo.QueryResult<AdminOrderConnectionQuery, AdminOrderConnectionQueryVariables>;
export const AdminPaymentConnectionDocument = gql`
    query AdminPaymentConnection($payerMixinUuid: String, $state: String, $after: String) {
  adminPaymentConnection(
    payerMixinUuid: $payerMixinUuid
    state: $state
    after: $after
  ) {
    nodes {
      traceId
      snapshotId
      amount
      state
      assetId
      opponentId
      decryptedMemo
      payer {
        name
        mixinId
        avatar
      }
      order {
        orderType
      }
      currency {
        assetId
        iconUrl
        symbol
      }
      createdAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useAdminPaymentConnectionQuery__
 *
 * To run a query within a React component, call `useAdminPaymentConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminPaymentConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminPaymentConnectionQuery({
 *   variables: {
 *      payerMixinUuid: // value for 'payerMixinUuid'
 *      state: // value for 'state'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useAdminPaymentConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminPaymentConnectionQuery, AdminPaymentConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminPaymentConnectionQuery, AdminPaymentConnectionQueryVariables>(AdminPaymentConnectionDocument, options);
      }
export function useAdminPaymentConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminPaymentConnectionQuery, AdminPaymentConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminPaymentConnectionQuery, AdminPaymentConnectionQueryVariables>(AdminPaymentConnectionDocument, options);
        }
export type AdminPaymentConnectionQueryHookResult = ReturnType<typeof useAdminPaymentConnectionQuery>;
export type AdminPaymentConnectionLazyQueryHookResult = ReturnType<typeof useAdminPaymentConnectionLazyQuery>;
export type AdminPaymentConnectionQueryResult = Apollo.QueryResult<AdminPaymentConnectionQuery, AdminPaymentConnectionQueryVariables>;
export const AdminPrsAccountConnectionDocument = gql`
    query AdminPrsAccountConnection($query: String, $status: String, $after: String) {
  adminPrsAccountConnection(query: $query, status: $status, after: $after) {
    nodes {
      id
      account
      status
      user {
        name
        avatar
        mixinId
      }
      createdAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useAdminPrsAccountConnectionQuery__
 *
 * To run a query within a React component, call `useAdminPrsAccountConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminPrsAccountConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminPrsAccountConnectionQuery({
 *   variables: {
 *      query: // value for 'query'
 *      status: // value for 'status'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useAdminPrsAccountConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminPrsAccountConnectionQuery, AdminPrsAccountConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminPrsAccountConnectionQuery, AdminPrsAccountConnectionQueryVariables>(AdminPrsAccountConnectionDocument, options);
      }
export function useAdminPrsAccountConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminPrsAccountConnectionQuery, AdminPrsAccountConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminPrsAccountConnectionQuery, AdminPrsAccountConnectionQueryVariables>(AdminPrsAccountConnectionDocument, options);
        }
export type AdminPrsAccountConnectionQueryHookResult = ReturnType<typeof useAdminPrsAccountConnectionQuery>;
export type AdminPrsAccountConnectionLazyQueryHookResult = ReturnType<typeof useAdminPrsAccountConnectionLazyQuery>;
export type AdminPrsAccountConnectionQueryResult = Apollo.QueryResult<AdminPrsAccountConnectionQuery, AdminPrsAccountConnectionQueryVariables>;
export const AdminPrsTransactionConnectionDocument = gql`
    query AdminPrsTransactionConnection($type: String, $after: String) {
  adminPrsTransactionConnection(type: $type, after: $after) {
    nodes {
      id
      type
      blockNum
      blockType
      signature
      userAddress
      transactionId
      data
      prsAccount {
        account
        status
        user {
          mixinId
          name
        }
      }
      processedAt
      createdAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useAdminPrsTransactionConnectionQuery__
 *
 * To run a query within a React component, call `useAdminPrsTransactionConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminPrsTransactionConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminPrsTransactionConnectionQuery({
 *   variables: {
 *      type: // value for 'type'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useAdminPrsTransactionConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminPrsTransactionConnectionQuery, AdminPrsTransactionConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminPrsTransactionConnectionQuery, AdminPrsTransactionConnectionQueryVariables>(AdminPrsTransactionConnectionDocument, options);
      }
export function useAdminPrsTransactionConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminPrsTransactionConnectionQuery, AdminPrsTransactionConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminPrsTransactionConnectionQuery, AdminPrsTransactionConnectionQueryVariables>(AdminPrsTransactionConnectionDocument, options);
        }
export type AdminPrsTransactionConnectionQueryHookResult = ReturnType<typeof useAdminPrsTransactionConnectionQuery>;
export type AdminPrsTransactionConnectionLazyQueryHookResult = ReturnType<typeof useAdminPrsTransactionConnectionLazyQuery>;
export type AdminPrsTransactionConnectionQueryResult = Apollo.QueryResult<AdminPrsTransactionConnectionQuery, AdminPrsTransactionConnectionQueryVariables>;
export const RevenueChartDocument = gql`
    query RevenueChart {
  revenueChart
}
    `;

/**
 * __useRevenueChartQuery__
 *
 * To run a query within a React component, call `useRevenueChartQuery` and pass it any options that fit your needs.
 * When your component renders, `useRevenueChartQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useRevenueChartQuery({
 *   variables: {
 *   },
 * });
 */
export function useRevenueChartQuery(baseOptions?: Apollo.QueryHookOptions<RevenueChartQuery, RevenueChartQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<RevenueChartQuery, RevenueChartQueryVariables>(RevenueChartDocument, options);
      }
export function useRevenueChartLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<RevenueChartQuery, RevenueChartQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<RevenueChartQuery, RevenueChartQueryVariables>(RevenueChartDocument, options);
        }
export type RevenueChartQueryHookResult = ReturnType<typeof useRevenueChartQuery>;
export type RevenueChartLazyQueryHookResult = ReturnType<typeof useRevenueChartLazyQuery>;
export type RevenueChartQueryResult = Apollo.QueryResult<RevenueChartQuery, RevenueChartQueryVariables>;
export const AdminSwapOrderConnectionDocument = gql`
    query AdminSwapOrderConnection($payerMixinUuid: ID, $state: String, $after: String) {
  adminSwapOrderConnection(
    payerMixinUuid: $payerMixinUuid
    state: $state
    after: $after
  ) {
    nodes {
      id
      traceId
      state
      funds
      amount
      minAmount
      fillAssetId
      payAssetId
      article {
        uuid
        title
        price
      }
      payer {
        name
        avatar
        mixinId
      }
      payAsset {
        assetId
        iconUrl
        symbol
      }
      fillAsset {
        assetId
        iconUrl
        symbol
      }
      createdAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useAdminSwapOrderConnectionQuery__
 *
 * To run a query within a React component, call `useAdminSwapOrderConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminSwapOrderConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminSwapOrderConnectionQuery({
 *   variables: {
 *      payerMixinUuid: // value for 'payerMixinUuid'
 *      state: // value for 'state'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useAdminSwapOrderConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminSwapOrderConnectionQuery, AdminSwapOrderConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminSwapOrderConnectionQuery, AdminSwapOrderConnectionQueryVariables>(AdminSwapOrderConnectionDocument, options);
      }
export function useAdminSwapOrderConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminSwapOrderConnectionQuery, AdminSwapOrderConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminSwapOrderConnectionQuery, AdminSwapOrderConnectionQueryVariables>(AdminSwapOrderConnectionDocument, options);
        }
export type AdminSwapOrderConnectionQueryHookResult = ReturnType<typeof useAdminSwapOrderConnectionQuery>;
export type AdminSwapOrderConnectionLazyQueryHookResult = ReturnType<typeof useAdminSwapOrderConnectionLazyQuery>;
export type AdminSwapOrderConnectionQueryResult = Apollo.QueryResult<AdminSwapOrderConnectionQuery, AdminSwapOrderConnectionQueryVariables>;
export const AdminTransferConnectionDocument = gql`
    query AdminTransferConnection($itemId: ID, $itemType: String, $souceId: ID, $souceType: String, $transferType: String, $after: String) {
  adminTransferConnection(
    itemId: $itemId
    itemType: $itemType
    sourceId: $souceId
    sourceType: $souceType
    transferType: $transferType
    after: $after
  ) {
    nodes {
      traceId
      snapshotId
      amount
      memo
      transferType
      assetId
      opponentId
      walletId
      recipient {
        name
        avatar
        mixinId
      }
      currency {
        assetId
        iconUrl
        symbol
      }
      processedAt
      createdAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useAdminTransferConnectionQuery__
 *
 * To run a query within a React component, call `useAdminTransferConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminTransferConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminTransferConnectionQuery({
 *   variables: {
 *      itemId: // value for 'itemId'
 *      itemType: // value for 'itemType'
 *      souceId: // value for 'souceId'
 *      souceType: // value for 'souceType'
 *      transferType: // value for 'transferType'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useAdminTransferConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminTransferConnectionQuery, AdminTransferConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminTransferConnectionQuery, AdminTransferConnectionQueryVariables>(AdminTransferConnectionDocument, options);
      }
export function useAdminTransferConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminTransferConnectionQuery, AdminTransferConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminTransferConnectionQuery, AdminTransferConnectionQueryVariables>(AdminTransferConnectionDocument, options);
        }
export type AdminTransferConnectionQueryHookResult = ReturnType<typeof useAdminTransferConnectionQuery>;
export type AdminTransferConnectionLazyQueryHookResult = ReturnType<typeof useAdminTransferConnectionLazyQuery>;
export type AdminTransferConnectionQueryResult = Apollo.QueryResult<AdminTransferConnectionQuery, AdminTransferConnectionQueryVariables>;
export const UserChartDocument = gql`
    query UserChart {
  userChart
}
    `;

/**
 * __useUserChartQuery__
 *
 * To run a query within a React component, call `useUserChartQuery` and pass it any options that fit your needs.
 * When your component renders, `useUserChartQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useUserChartQuery({
 *   variables: {
 *   },
 * });
 */
export function useUserChartQuery(baseOptions?: Apollo.QueryHookOptions<UserChartQuery, UserChartQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<UserChartQuery, UserChartQueryVariables>(UserChartDocument, options);
      }
export function useUserChartLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UserChartQuery, UserChartQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<UserChartQuery, UserChartQueryVariables>(UserChartDocument, options);
        }
export type UserChartQueryHookResult = ReturnType<typeof useUserChartQuery>;
export type UserChartLazyQueryHookResult = ReturnType<typeof useUserChartLazyQuery>;
export type UserChartQueryResult = Apollo.QueryResult<UserChartQuery, UserChartQueryVariables>;
export const AdminUserConnectionDocument = gql`
    query AdminUserConnection($query: String, $orderBy: String, $filter: String, $after: String) {
  adminUserConnection(
    query: $query
    orderBy: $orderBy
    filter: $filter
    after: $after
  ) {
    nodes {
      id
      name
      mixinId
      phone
      mixinUuid
      avatar
      statistics {
        articlesCount
        commentsCount
        boughtArticlesCount
        revenueTotalUsd
        paymentTotalUsd
        revenueTotalBtc
        paymentTotalBtc
      }
      createdAt
      bannedAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useAdminUserConnectionQuery__
 *
 * To run a query within a React component, call `useAdminUserConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminUserConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminUserConnectionQuery({
 *   variables: {
 *      query: // value for 'query'
 *      orderBy: // value for 'orderBy'
 *      filter: // value for 'filter'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useAdminUserConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminUserConnectionQuery, AdminUserConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminUserConnectionQuery, AdminUserConnectionQueryVariables>(AdminUserConnectionDocument, options);
      }
export function useAdminUserConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminUserConnectionQuery, AdminUserConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminUserConnectionQuery, AdminUserConnectionQueryVariables>(AdminUserConnectionDocument, options);
        }
export type AdminUserConnectionQueryHookResult = ReturnType<typeof useAdminUserConnectionQuery>;
export type AdminUserConnectionLazyQueryHookResult = ReturnType<typeof useAdminUserConnectionLazyQuery>;
export type AdminUserConnectionQueryResult = Apollo.QueryResult<AdminUserConnectionQuery, AdminUserConnectionQueryVariables>;
export const AdminUserDocument = gql`
    query AdminUser($mixinId: ID!) {
  adminUser(mixinId: $mixinId) {
    id
    name
    mixinId
    phone
    mixinUuid
    avatar
    bio
    walletId
    statistics {
      articlesCount
      authorRevenueTotalUsd
      readerRevenueTotalUsd
    }
  }
}
    `;

/**
 * __useAdminUserQuery__
 *
 * To run a query within a React component, call `useAdminUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminUserQuery({
 *   variables: {
 *      mixinId: // value for 'mixinId'
 *   },
 * });
 */
export function useAdminUserQuery(baseOptions: Apollo.QueryHookOptions<AdminUserQuery, AdminUserQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminUserQuery, AdminUserQueryVariables>(AdminUserDocument, options);
      }
export function useAdminUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminUserQuery, AdminUserQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminUserQuery, AdminUserQueryVariables>(AdminUserDocument, options);
        }
export type AdminUserQueryHookResult = ReturnType<typeof useAdminUserQuery>;
export type AdminUserLazyQueryHookResult = ReturnType<typeof useAdminUserLazyQuery>;
export type AdminUserQueryResult = Apollo.QueryResult<AdminUserQuery, AdminUserQueryVariables>;
export const AdminWalletBalanceDocument = gql`
    query AdminWalletBalance($userId: String) {
  adminWalletBalance(userId: $userId) {
    assetId
    name
    symbol
    iconUrl
    balance
    priceUsd
    priceBtc
  }
}
    `;

/**
 * __useAdminWalletBalanceQuery__
 *
 * To run a query within a React component, call `useAdminWalletBalanceQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminWalletBalanceQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminWalletBalanceQuery({
 *   variables: {
 *      userId: // value for 'userId'
 *   },
 * });
 */
export function useAdminWalletBalanceQuery(baseOptions?: Apollo.QueryHookOptions<AdminWalletBalanceQuery, AdminWalletBalanceQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminWalletBalanceQuery, AdminWalletBalanceQueryVariables>(AdminWalletBalanceDocument, options);
      }
export function useAdminWalletBalanceLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminWalletBalanceQuery, AdminWalletBalanceQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminWalletBalanceQuery, AdminWalletBalanceQueryVariables>(AdminWalletBalanceDocument, options);
        }
export type AdminWalletBalanceQueryHookResult = ReturnType<typeof useAdminWalletBalanceQuery>;
export type AdminWalletBalanceLazyQueryHookResult = ReturnType<typeof useAdminWalletBalanceLazyQuery>;
export type AdminWalletBalanceQueryResult = Apollo.QueryResult<AdminWalletBalanceQuery, AdminWalletBalanceQueryVariables>;
export const CreateCommentDocument = gql`
    mutation CreateComment($input: CreateCommentMutationInput!) {
  createComment(input: $input) {
    error
    commentable {
      id
      commentingSubscribed
    }
  }
}
    `;
export type CreateCommentMutationFn = Apollo.MutationFunction<CreateCommentMutation, CreateCommentMutationVariables>;

/**
 * __useCreateCommentMutation__
 *
 * To run a mutation, you first call `useCreateCommentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateCommentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createCommentMutation, { data, loading, error }] = useCreateCommentMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateCommentMutation(baseOptions?: Apollo.MutationHookOptions<CreateCommentMutation, CreateCommentMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateCommentMutation, CreateCommentMutationVariables>(CreateCommentDocument, options);
      }
export type CreateCommentMutationHookResult = ReturnType<typeof useCreateCommentMutation>;
export type CreateCommentMutationResult = Apollo.MutationResult<CreateCommentMutation>;
export type CreateCommentMutationOptions = Apollo.BaseMutationOptions<CreateCommentMutation, CreateCommentMutationVariables>;
export const DownvoteArticleDocument = gql`
    mutation DownvoteArticle($input: DownvoteArticleMutationInput!) {
  downvoteArticle(input: $input) {
    id
    uuid
    upvotesCount
    downvotesCount
    upvoted
    downvoted
  }
}
    `;
export type DownvoteArticleMutationFn = Apollo.MutationFunction<DownvoteArticleMutation, DownvoteArticleMutationVariables>;

/**
 * __useDownvoteArticleMutation__
 *
 * To run a mutation, you first call `useDownvoteArticleMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDownvoteArticleMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [downvoteArticleMutation, { data, loading, error }] = useDownvoteArticleMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDownvoteArticleMutation(baseOptions?: Apollo.MutationHookOptions<DownvoteArticleMutation, DownvoteArticleMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DownvoteArticleMutation, DownvoteArticleMutationVariables>(DownvoteArticleDocument, options);
      }
export type DownvoteArticleMutationHookResult = ReturnType<typeof useDownvoteArticleMutation>;
export type DownvoteArticleMutationResult = Apollo.MutationResult<DownvoteArticleMutation>;
export type DownvoteArticleMutationOptions = Apollo.BaseMutationOptions<DownvoteArticleMutation, DownvoteArticleMutationVariables>;
export const DownvoteCommentDocument = gql`
    mutation DownvoteComment($input: DownvoteCommentMutationInput!) {
  downvoteComment(input: $input) {
    id
    upvoted
    downvoted
    upvotesCount
    downvotesCount
  }
}
    `;
export type DownvoteCommentMutationFn = Apollo.MutationFunction<DownvoteCommentMutation, DownvoteCommentMutationVariables>;

/**
 * __useDownvoteCommentMutation__
 *
 * To run a mutation, you first call `useDownvoteCommentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDownvoteCommentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [downvoteCommentMutation, { data, loading, error }] = useDownvoteCommentMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDownvoteCommentMutation(baseOptions?: Apollo.MutationHookOptions<DownvoteCommentMutation, DownvoteCommentMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DownvoteCommentMutation, DownvoteCommentMutationVariables>(DownvoteCommentDocument, options);
      }
export type DownvoteCommentMutationHookResult = ReturnType<typeof useDownvoteCommentMutation>;
export type DownvoteCommentMutationResult = Apollo.MutationResult<DownvoteCommentMutation>;
export type DownvoteCommentMutationOptions = Apollo.BaseMutationOptions<DownvoteCommentMutation, DownvoteCommentMutationVariables>;
export const ToggleAuthoringSubscribeUserActionDocument = gql`
    mutation ToggleAuthoringSubscribeUserAction($input: ToggleAuthoringSubscribeUserActionMutationInput!) {
  toggleAuthoringSubscribeUserAction(input: $input) {
    error
  }
}
    `;
export type ToggleAuthoringSubscribeUserActionMutationFn = Apollo.MutationFunction<ToggleAuthoringSubscribeUserActionMutation, ToggleAuthoringSubscribeUserActionMutationVariables>;

/**
 * __useToggleAuthoringSubscribeUserActionMutation__
 *
 * To run a mutation, you first call `useToggleAuthoringSubscribeUserActionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useToggleAuthoringSubscribeUserActionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [toggleAuthoringSubscribeUserActionMutation, { data, loading, error }] = useToggleAuthoringSubscribeUserActionMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useToggleAuthoringSubscribeUserActionMutation(baseOptions?: Apollo.MutationHookOptions<ToggleAuthoringSubscribeUserActionMutation, ToggleAuthoringSubscribeUserActionMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<ToggleAuthoringSubscribeUserActionMutation, ToggleAuthoringSubscribeUserActionMutationVariables>(ToggleAuthoringSubscribeUserActionDocument, options);
      }
export type ToggleAuthoringSubscribeUserActionMutationHookResult = ReturnType<typeof useToggleAuthoringSubscribeUserActionMutation>;
export type ToggleAuthoringSubscribeUserActionMutationResult = Apollo.MutationResult<ToggleAuthoringSubscribeUserActionMutation>;
export type ToggleAuthoringSubscribeUserActionMutationOptions = Apollo.BaseMutationOptions<ToggleAuthoringSubscribeUserActionMutation, ToggleAuthoringSubscribeUserActionMutationVariables>;
export const ToggleCommentingSubscribeArticleActionDocument = gql`
    mutation ToggleCommentingSubscribeArticleAction($input: ToggleCommentingSubscribeArticleActionMutationInput!) {
  toggleCommentingSubscribeArticleAction(input: $input) {
    id
    uuid
    commentingSubscribed
  }
}
    `;
export type ToggleCommentingSubscribeArticleActionMutationFn = Apollo.MutationFunction<ToggleCommentingSubscribeArticleActionMutation, ToggleCommentingSubscribeArticleActionMutationVariables>;

/**
 * __useToggleCommentingSubscribeArticleActionMutation__
 *
 * To run a mutation, you first call `useToggleCommentingSubscribeArticleActionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useToggleCommentingSubscribeArticleActionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [toggleCommentingSubscribeArticleActionMutation, { data, loading, error }] = useToggleCommentingSubscribeArticleActionMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useToggleCommentingSubscribeArticleActionMutation(baseOptions?: Apollo.MutationHookOptions<ToggleCommentingSubscribeArticleActionMutation, ToggleCommentingSubscribeArticleActionMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<ToggleCommentingSubscribeArticleActionMutation, ToggleCommentingSubscribeArticleActionMutationVariables>(ToggleCommentingSubscribeArticleActionDocument, options);
      }
export type ToggleCommentingSubscribeArticleActionMutationHookResult = ReturnType<typeof useToggleCommentingSubscribeArticleActionMutation>;
export type ToggleCommentingSubscribeArticleActionMutationResult = Apollo.MutationResult<ToggleCommentingSubscribeArticleActionMutation>;
export type ToggleCommentingSubscribeArticleActionMutationOptions = Apollo.BaseMutationOptions<ToggleCommentingSubscribeArticleActionMutation, ToggleCommentingSubscribeArticleActionMutationVariables>;
export const ToggleReadingSubscribeUserActionDocument = gql`
    mutation ToggleReadingSubscribeUserAction($input: ToggleReadingSubscribeUserActionMutationInput!) {
  toggleReadingSubscribeUserAction(input: $input) {
    error
  }
}
    `;
export type ToggleReadingSubscribeUserActionMutationFn = Apollo.MutationFunction<ToggleReadingSubscribeUserActionMutation, ToggleReadingSubscribeUserActionMutationVariables>;

/**
 * __useToggleReadingSubscribeUserActionMutation__
 *
 * To run a mutation, you first call `useToggleReadingSubscribeUserActionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useToggleReadingSubscribeUserActionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [toggleReadingSubscribeUserActionMutation, { data, loading, error }] = useToggleReadingSubscribeUserActionMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useToggleReadingSubscribeUserActionMutation(baseOptions?: Apollo.MutationHookOptions<ToggleReadingSubscribeUserActionMutation, ToggleReadingSubscribeUserActionMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<ToggleReadingSubscribeUserActionMutation, ToggleReadingSubscribeUserActionMutationVariables>(ToggleReadingSubscribeUserActionDocument, options);
      }
export type ToggleReadingSubscribeUserActionMutationHookResult = ReturnType<typeof useToggleReadingSubscribeUserActionMutation>;
export type ToggleReadingSubscribeUserActionMutationResult = Apollo.MutationResult<ToggleReadingSubscribeUserActionMutation>;
export type ToggleReadingSubscribeUserActionMutationOptions = Apollo.BaseMutationOptions<ToggleReadingSubscribeUserActionMutation, ToggleReadingSubscribeUserActionMutationVariables>;
export const ToggleSubscribeTagActionDocument = gql`
    mutation ToggleSubscribeTagAction($input: ToggleSubscribeTagActionMutationInput!) {
  toggleSubscribeTagAction(input: $input) {
    id
    subscribed
    subscribersCount
  }
}
    `;
export type ToggleSubscribeTagActionMutationFn = Apollo.MutationFunction<ToggleSubscribeTagActionMutation, ToggleSubscribeTagActionMutationVariables>;

/**
 * __useToggleSubscribeTagActionMutation__
 *
 * To run a mutation, you first call `useToggleSubscribeTagActionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useToggleSubscribeTagActionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [toggleSubscribeTagActionMutation, { data, loading, error }] = useToggleSubscribeTagActionMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useToggleSubscribeTagActionMutation(baseOptions?: Apollo.MutationHookOptions<ToggleSubscribeTagActionMutation, ToggleSubscribeTagActionMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<ToggleSubscribeTagActionMutation, ToggleSubscribeTagActionMutationVariables>(ToggleSubscribeTagActionDocument, options);
      }
export type ToggleSubscribeTagActionMutationHookResult = ReturnType<typeof useToggleSubscribeTagActionMutation>;
export type ToggleSubscribeTagActionMutationResult = Apollo.MutationResult<ToggleSubscribeTagActionMutation>;
export type ToggleSubscribeTagActionMutationOptions = Apollo.BaseMutationOptions<ToggleSubscribeTagActionMutation, ToggleSubscribeTagActionMutationVariables>;
export const UpvoteArticleDocument = gql`
    mutation UpvoteArticle($input: UpvoteArticleMutationInput!) {
  upvoteArticle(input: $input) {
    id
    uuid
    upvotesCount
    downvotesCount
    upvoted
    downvoted
  }
}
    `;
export type UpvoteArticleMutationFn = Apollo.MutationFunction<UpvoteArticleMutation, UpvoteArticleMutationVariables>;

/**
 * __useUpvoteArticleMutation__
 *
 * To run a mutation, you first call `useUpvoteArticleMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpvoteArticleMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [upvoteArticleMutation, { data, loading, error }] = useUpvoteArticleMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpvoteArticleMutation(baseOptions?: Apollo.MutationHookOptions<UpvoteArticleMutation, UpvoteArticleMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpvoteArticleMutation, UpvoteArticleMutationVariables>(UpvoteArticleDocument, options);
      }
export type UpvoteArticleMutationHookResult = ReturnType<typeof useUpvoteArticleMutation>;
export type UpvoteArticleMutationResult = Apollo.MutationResult<UpvoteArticleMutation>;
export type UpvoteArticleMutationOptions = Apollo.BaseMutationOptions<UpvoteArticleMutation, UpvoteArticleMutationVariables>;
export const UpvoteCommentDocument = gql`
    mutation UpvoteComment($input: UpvoteCommentMutationInput!) {
  upvoteComment(input: $input) {
    id
    upvoted
    downvoted
    upvotesCount
    downvotesCount
  }
}
    `;
export type UpvoteCommentMutationFn = Apollo.MutationFunction<UpvoteCommentMutation, UpvoteCommentMutationVariables>;

/**
 * __useUpvoteCommentMutation__
 *
 * To run a mutation, you first call `useUpvoteCommentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpvoteCommentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [upvoteCommentMutation, { data, loading, error }] = useUpvoteCommentMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpvoteCommentMutation(baseOptions?: Apollo.MutationHookOptions<UpvoteCommentMutation, UpvoteCommentMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpvoteCommentMutation, UpvoteCommentMutationVariables>(UpvoteCommentDocument, options);
      }
export type UpvoteCommentMutationHookResult = ReturnType<typeof useUpvoteCommentMutation>;
export type UpvoteCommentMutationResult = Apollo.MutationResult<UpvoteCommentMutation>;
export type UpvoteCommentMutationOptions = Apollo.BaseMutationOptions<UpvoteCommentMutation, UpvoteCommentMutationVariables>;
export const ArticleConnectionDocument = gql`
    query ArticleConnection($filter: String!, $query: String, $after: String, $timeRange: String) {
  articleConnection(
    filter: $filter
    query: $query
    after: $after
    timeRange: $timeRange
  ) {
    nodes {
      uuid
      title
      intro
      price
      priceUsd
      revenueBtc
      revenueUsd
      ordersCount
      commentsCount
      upvoteRatio
      tags {
        id
        name
        color
      }
      author {
        name
        avatar
        mixinId
        bio
      }
      currency {
        assetId
        symbol
        iconUrl
      }
      createdAt
      publishedAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useArticleConnectionQuery__
 *
 * To run a query within a React component, call `useArticleConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useArticleConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useArticleConnectionQuery({
 *   variables: {
 *      filter: // value for 'filter'
 *      query: // value for 'query'
 *      after: // value for 'after'
 *      timeRange: // value for 'timeRange'
 *   },
 * });
 */
export function useArticleConnectionQuery(baseOptions: Apollo.QueryHookOptions<ArticleConnectionQuery, ArticleConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ArticleConnectionQuery, ArticleConnectionQueryVariables>(ArticleConnectionDocument, options);
      }
export function useArticleConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ArticleConnectionQuery, ArticleConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ArticleConnectionQuery, ArticleConnectionQueryVariables>(ArticleConnectionDocument, options);
        }
export type ArticleConnectionQueryHookResult = ReturnType<typeof useArticleConnectionQuery>;
export type ArticleConnectionLazyQueryHookResult = ReturnType<typeof useArticleConnectionLazyQuery>;
export type ArticleConnectionQueryResult = Apollo.QueryResult<ArticleConnectionQuery, ArticleConnectionQueryVariables>;
export const ArticleDocument = gql`
    query Article($uuid: ID!) {
  article(uuid: $uuid) {
    id
    uuid
    title
    intro
    content
    price
    priceUsd
    assetId
    authorized
    ordersCount
    commentsCount
    myShare
    revenueUsd
    commentingSubscribed
    paymentTraceId
    upvoted
    downvoted
    upvotesCount
    downvotesCount
    wordsCount
    partialContent
    walletId
    swappable
    signatureUrl
    tags {
      id
      name
      color
    }
    author {
      name
      avatar
      avatar
      mixinId
      bio
      authoringSubscribed
    }
    randomReaders {
      name
      avatar
      mixinId
    }
    readers {
      totalCount
    }
    buyOrders {
      totalCount
    }
    rewardOrders {
      totalCount
    }
    currency {
      assetId
      symbol
      iconUrl
      priceUsd
    }
    articleReferences {
      revenueRatio
      reference {
        author {
          mixinUuid
          name
          avatar
        }
        uuid
        title
      }
    }
    citers {
      author {
        mixinUuid
        name
        avatar
      }
      uuid
      title
    }
    createdAt
    publishedAt
  }
  swappableCurrencies {
    id
    assetId
    name
    symbol
    iconUrl
    priceUsd
    priceBtc
  }
}
    `;

/**
 * __useArticleQuery__
 *
 * To run a query within a React component, call `useArticleQuery` and pass it any options that fit your needs.
 * When your component renders, `useArticleQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useArticleQuery({
 *   variables: {
 *      uuid: // value for 'uuid'
 *   },
 * });
 */
export function useArticleQuery(baseOptions: Apollo.QueryHookOptions<ArticleQuery, ArticleQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ArticleQuery, ArticleQueryVariables>(ArticleDocument, options);
      }
export function useArticleLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ArticleQuery, ArticleQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ArticleQuery, ArticleQueryVariables>(ArticleDocument, options);
        }
export type ArticleQueryHookResult = ReturnType<typeof useArticleQuery>;
export type ArticleLazyQueryHookResult = ReturnType<typeof useArticleLazyQuery>;
export type ArticleQueryResult = Apollo.QueryResult<ArticleQuery, ArticleQueryVariables>;
export const CommentConnectionDocument = gql`
    query CommentConnection($commentableType: String, $commentableId: ID, $authorMixinId: String, $orderBy: String, $after: String) {
  commentConnection(
    commentableType: $commentableType
    commentableId: $commentableId
    authorMixinId: $authorMixinId
    orderBy: $orderBy
    after: $after
  ) {
    nodes {
      id
      content
      deletedAt
      upvotesCount
      downvotesCount
      upvoted
      downvoted
      author {
        name
        avatar
        mixinId
        bio
        createdAt
      }
      commentable {
        uuid
        title
      }
      createdAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useCommentConnectionQuery__
 *
 * To run a query within a React component, call `useCommentConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useCommentConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCommentConnectionQuery({
 *   variables: {
 *      commentableType: // value for 'commentableType'
 *      commentableId: // value for 'commentableId'
 *      authorMixinId: // value for 'authorMixinId'
 *      orderBy: // value for 'orderBy'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useCommentConnectionQuery(baseOptions?: Apollo.QueryHookOptions<CommentConnectionQuery, CommentConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<CommentConnectionQuery, CommentConnectionQueryVariables>(CommentConnectionDocument, options);
      }
export function useCommentConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CommentConnectionQuery, CommentConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<CommentConnectionQuery, CommentConnectionQueryVariables>(CommentConnectionDocument, options);
        }
export type CommentConnectionQueryHookResult = ReturnType<typeof useCommentConnectionQuery>;
export type CommentConnectionLazyQueryHookResult = ReturnType<typeof useCommentConnectionLazyQuery>;
export type CommentConnectionQueryResult = Apollo.QueryResult<CommentConnectionQuery, CommentConnectionQueryVariables>;
export const PaymentDocument = gql`
    query Payment($traceId: ID!) {
  payment(traceId: $traceId) {
    traceId
    amount
    assetId
    state
  }
}
    `;

/**
 * __usePaymentQuery__
 *
 * To run a query within a React component, call `usePaymentQuery` and pass it any options that fit your needs.
 * When your component renders, `usePaymentQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePaymentQuery({
 *   variables: {
 *      traceId: // value for 'traceId'
 *   },
 * });
 */
export function usePaymentQuery(baseOptions: Apollo.QueryHookOptions<PaymentQuery, PaymentQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<PaymentQuery, PaymentQueryVariables>(PaymentDocument, options);
      }
export function usePaymentLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PaymentQuery, PaymentQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<PaymentQuery, PaymentQueryVariables>(PaymentDocument, options);
        }
export type PaymentQueryHookResult = ReturnType<typeof usePaymentQuery>;
export type PaymentLazyQueryHookResult = ReturnType<typeof usePaymentLazyQuery>;
export type PaymentQueryResult = Apollo.QueryResult<PaymentQuery, PaymentQueryVariables>;
export const StatisticsDocument = gql`
    query Statistics {
  statistics {
    usersCount
    articlesCount
    authorRevenueTotal
    readerRevenueTotal
  }
}
    `;

/**
 * __useStatisticsQuery__
 *
 * To run a query within a React component, call `useStatisticsQuery` and pass it any options that fit your needs.
 * When your component renders, `useStatisticsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useStatisticsQuery({
 *   variables: {
 *   },
 * });
 */
export function useStatisticsQuery(baseOptions?: Apollo.QueryHookOptions<StatisticsQuery, StatisticsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<StatisticsQuery, StatisticsQueryVariables>(StatisticsDocument, options);
      }
export function useStatisticsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<StatisticsQuery, StatisticsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<StatisticsQuery, StatisticsQueryVariables>(StatisticsDocument, options);
        }
export type StatisticsQueryHookResult = ReturnType<typeof useStatisticsQuery>;
export type StatisticsLazyQueryHookResult = ReturnType<typeof useStatisticsLazyQuery>;
export type StatisticsQueryResult = Apollo.QueryResult<StatisticsQuery, StatisticsQueryVariables>;
export const SwapPreOrderDocument = gql`
    query SwapPreOrder($payAssetId: String!, $fillAssetId: String!, $amount: Float!) {
  swapPreOrder(
    payAssetId: $payAssetId
    fillAssetId: $fillAssetId
    amount: $amount
  ) {
    state
    funds
    amount
    minAmount
    fillAssetId
    payAssetId
    priceImpact
    routePrice
  }
}
    `;

/**
 * __useSwapPreOrderQuery__
 *
 * To run a query within a React component, call `useSwapPreOrderQuery` and pass it any options that fit your needs.
 * When your component renders, `useSwapPreOrderQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSwapPreOrderQuery({
 *   variables: {
 *      payAssetId: // value for 'payAssetId'
 *      fillAssetId: // value for 'fillAssetId'
 *      amount: // value for 'amount'
 *   },
 * });
 */
export function useSwapPreOrderQuery(baseOptions: Apollo.QueryHookOptions<SwapPreOrderQuery, SwapPreOrderQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SwapPreOrderQuery, SwapPreOrderQueryVariables>(SwapPreOrderDocument, options);
      }
export function useSwapPreOrderLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SwapPreOrderQuery, SwapPreOrderQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SwapPreOrderQuery, SwapPreOrderQueryVariables>(SwapPreOrderDocument, options);
        }
export type SwapPreOrderQueryHookResult = ReturnType<typeof useSwapPreOrderQuery>;
export type SwapPreOrderLazyQueryHookResult = ReturnType<typeof useSwapPreOrderLazyQuery>;
export type SwapPreOrderQueryResult = Apollo.QueryResult<SwapPreOrderQuery, SwapPreOrderQueryVariables>;
export const TagConnectionDocument = gql`
    query TagConnection($after: String) {
  tagConnection(after: $after) {
    nodes {
      id
      name
      color
      articlesCount
      createdAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useTagConnectionQuery__
 *
 * To run a query within a React component, call `useTagConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useTagConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useTagConnectionQuery({
 *   variables: {
 *      after: // value for 'after'
 *   },
 * });
 */
export function useTagConnectionQuery(baseOptions?: Apollo.QueryHookOptions<TagConnectionQuery, TagConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<TagConnectionQuery, TagConnectionQueryVariables>(TagConnectionDocument, options);
      }
export function useTagConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TagConnectionQuery, TagConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<TagConnectionQuery, TagConnectionQueryVariables>(TagConnectionDocument, options);
        }
export type TagConnectionQueryHookResult = ReturnType<typeof useTagConnectionQuery>;
export type TagConnectionLazyQueryHookResult = ReturnType<typeof useTagConnectionLazyQuery>;
export type TagConnectionQueryResult = Apollo.QueryResult<TagConnectionQuery, TagConnectionQueryVariables>;
export const TaggedArticleConnectionDocument = gql`
    query TaggedArticleConnection($tagId: ID, $tag: String, $filter: String!, $query: String, $after: String) {
  tag(id: $tagId, name: $tag) {
    id
    name
    color
    articlesCount
    subscribersCount
    subscribed
  }
  articleConnection(filter: $filter, query: $query, tag: $tag, after: $after) {
    nodes {
      uuid
      title
      intro
      price
      priceUsd
      revenueBtc
      revenueUsd
      ordersCount
      commentsCount
      upvoteRatio
      tags {
        id
        name
        color
      }
      author {
        name
        avatar
        mixinId
        bio
      }
      currency {
        assetId
        symbol
        iconUrl
      }
      createdAt
      publishedAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useTaggedArticleConnectionQuery__
 *
 * To run a query within a React component, call `useTaggedArticleConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useTaggedArticleConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useTaggedArticleConnectionQuery({
 *   variables: {
 *      tagId: // value for 'tagId'
 *      tag: // value for 'tag'
 *      filter: // value for 'filter'
 *      query: // value for 'query'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useTaggedArticleConnectionQuery(baseOptions: Apollo.QueryHookOptions<TaggedArticleConnectionQuery, TaggedArticleConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<TaggedArticleConnectionQuery, TaggedArticleConnectionQueryVariables>(TaggedArticleConnectionDocument, options);
      }
export function useTaggedArticleConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TaggedArticleConnectionQuery, TaggedArticleConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<TaggedArticleConnectionQuery, TaggedArticleConnectionQueryVariables>(TaggedArticleConnectionDocument, options);
        }
export type TaggedArticleConnectionQueryHookResult = ReturnType<typeof useTaggedArticleConnectionQuery>;
export type TaggedArticleConnectionLazyQueryHookResult = ReturnType<typeof useTaggedArticleConnectionLazyQuery>;
export type TaggedArticleConnectionQueryResult = Apollo.QueryResult<TaggedArticleConnectionQuery, TaggedArticleConnectionQueryVariables>;
export const TransferConnectionDocument = gql`
    query TransferConnection($after: String) {
  transferConnection(after: $after) {
    nodes {
      traceId
      snapshotId
      amount
      assetId
      transferType
      createdAt
      currency {
        assetId
        symbol
        iconUrl
      }
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useTransferConnectionQuery__
 *
 * To run a query within a React component, call `useTransferConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useTransferConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useTransferConnectionQuery({
 *   variables: {
 *      after: // value for 'after'
 *   },
 * });
 */
export function useTransferConnectionQuery(baseOptions?: Apollo.QueryHookOptions<TransferConnectionQuery, TransferConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<TransferConnectionQuery, TransferConnectionQueryVariables>(TransferConnectionDocument, options);
      }
export function useTransferConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TransferConnectionQuery, TransferConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<TransferConnectionQuery, TransferConnectionQueryVariables>(TransferConnectionDocument, options);
        }
export type TransferConnectionQueryHookResult = ReturnType<typeof useTransferConnectionQuery>;
export type TransferConnectionLazyQueryHookResult = ReturnType<typeof useTransferConnectionLazyQuery>;
export type TransferConnectionQueryResult = Apollo.QueryResult<TransferConnectionQuery, TransferConnectionQueryVariables>;
export const UserArticleConnectionDocument = gql`
    query UserArticleConnection($mixinId: ID!, $type: String!, $after: String) {
  userArticleConnection(mixinId: $mixinId, type: $type, after: $after) {
    nodes {
      uuid
      title
      intro
      price
      revenueUsd
      revenueBtc
      ordersCount
      state
      author {
        name
        avatar
      }
      createdAt
      publishedAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useUserArticleConnectionQuery__
 *
 * To run a query within a React component, call `useUserArticleConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useUserArticleConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useUserArticleConnectionQuery({
 *   variables: {
 *      mixinId: // value for 'mixinId'
 *      type: // value for 'type'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useUserArticleConnectionQuery(baseOptions: Apollo.QueryHookOptions<UserArticleConnectionQuery, UserArticleConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<UserArticleConnectionQuery, UserArticleConnectionQueryVariables>(UserArticleConnectionDocument, options);
      }
export function useUserArticleConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UserArticleConnectionQuery, UserArticleConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<UserArticleConnectionQuery, UserArticleConnectionQueryVariables>(UserArticleConnectionDocument, options);
        }
export type UserArticleConnectionQueryHookResult = ReturnType<typeof useUserArticleConnectionQuery>;
export type UserArticleConnectionLazyQueryHookResult = ReturnType<typeof useUserArticleConnectionLazyQuery>;
export type UserArticleConnectionQueryResult = Apollo.QueryResult<UserArticleConnectionQuery, UserArticleConnectionQueryVariables>;
export const UserDocument = gql`
    query User($mixinId: ID!) {
  user(mixinId: $mixinId) {
    id
    name
    mixinId
    mixinUuid
    avatar
    bio
    authoringSubscribed
    readingSubscribed
    statistics {
      articlesCount
      boughtArticlesCount
      authorRevenueTotalUsd
      readerRevenueTotalUsd
    }
  }
}
    `;

/**
 * __useUserQuery__
 *
 * To run a query within a React component, call `useUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useUserQuery({
 *   variables: {
 *      mixinId: // value for 'mixinId'
 *   },
 * });
 */
export function useUserQuery(baseOptions: Apollo.QueryHookOptions<UserQuery, UserQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<UserQuery, UserQueryVariables>(UserDocument, options);
      }
export function useUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UserQuery, UserQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<UserQuery, UserQueryVariables>(UserDocument, options);
        }
export type UserQueryHookResult = ReturnType<typeof useUserQuery>;
export type UserLazyQueryHookResult = ReturnType<typeof useUserLazyQuery>;
export type UserQueryResult = Apollo.QueryResult<UserQuery, UserQueryVariables>;
export const ClearNotificationsDocument = gql`
    mutation ClearNotifications($input: ClearNotificationsMutationInput!) {
  clearNotifications(input: $input)
}
    `;
export type ClearNotificationsMutationFn = Apollo.MutationFunction<ClearNotificationsMutation, ClearNotificationsMutationVariables>;

/**
 * __useClearNotificationsMutation__
 *
 * To run a mutation, you first call `useClearNotificationsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useClearNotificationsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [clearNotificationsMutation, { data, loading, error }] = useClearNotificationsMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useClearNotificationsMutation(baseOptions?: Apollo.MutationHookOptions<ClearNotificationsMutation, ClearNotificationsMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<ClearNotificationsMutation, ClearNotificationsMutationVariables>(ClearNotificationsDocument, options);
      }
export type ClearNotificationsMutationHookResult = ReturnType<typeof useClearNotificationsMutation>;
export type ClearNotificationsMutationResult = Apollo.MutationResult<ClearNotificationsMutation>;
export type ClearNotificationsMutationOptions = Apollo.BaseMutationOptions<ClearNotificationsMutation, ClearNotificationsMutationVariables>;
export const CreateAccessTokenDocument = gql`
    mutation CreateAccessToken($input: CreateAccessTokenMutationInput!) {
  createAccessToken(input: $input) {
    id
    value
    memo
  }
}
    `;
export type CreateAccessTokenMutationFn = Apollo.MutationFunction<CreateAccessTokenMutation, CreateAccessTokenMutationVariables>;

/**
 * __useCreateAccessTokenMutation__
 *
 * To run a mutation, you first call `useCreateAccessTokenMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateAccessTokenMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createAccessTokenMutation, { data, loading, error }] = useCreateAccessTokenMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateAccessTokenMutation(baseOptions?: Apollo.MutationHookOptions<CreateAccessTokenMutation, CreateAccessTokenMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateAccessTokenMutation, CreateAccessTokenMutationVariables>(CreateAccessTokenDocument, options);
      }
export type CreateAccessTokenMutationHookResult = ReturnType<typeof useCreateAccessTokenMutation>;
export type CreateAccessTokenMutationResult = Apollo.MutationResult<CreateAccessTokenMutation>;
export type CreateAccessTokenMutationOptions = Apollo.BaseMutationOptions<CreateAccessTokenMutation, CreateAccessTokenMutationVariables>;
export const CreateArticleDocument = gql`
    mutation CreateArticle {
  createArticle(input: {}) {
    uuid
  }
}
    `;
export type CreateArticleMutationFn = Apollo.MutationFunction<CreateArticleMutation, CreateArticleMutationVariables>;

/**
 * __useCreateArticleMutation__
 *
 * To run a mutation, you first call `useCreateArticleMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateArticleMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createArticleMutation, { data, loading, error }] = useCreateArticleMutation({
 *   variables: {
 *   },
 * });
 */
export function useCreateArticleMutation(baseOptions?: Apollo.MutationHookOptions<CreateArticleMutation, CreateArticleMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateArticleMutation, CreateArticleMutationVariables>(CreateArticleDocument, options);
      }
export type CreateArticleMutationHookResult = ReturnType<typeof useCreateArticleMutation>;
export type CreateArticleMutationResult = Apollo.MutationResult<CreateArticleMutation>;
export type CreateArticleMutationOptions = Apollo.BaseMutationOptions<CreateArticleMutation, CreateArticleMutationVariables>;
export const DeleteAccessTokenDocument = gql`
    mutation DeleteAccessToken($input: DeleteAccessTokenMutationInput!) {
  deleteAccessToken(input: $input)
}
    `;
export type DeleteAccessTokenMutationFn = Apollo.MutationFunction<DeleteAccessTokenMutation, DeleteAccessTokenMutationVariables>;

/**
 * __useDeleteAccessTokenMutation__
 *
 * To run a mutation, you first call `useDeleteAccessTokenMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteAccessTokenMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteAccessTokenMutation, { data, loading, error }] = useDeleteAccessTokenMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeleteAccessTokenMutation(baseOptions?: Apollo.MutationHookOptions<DeleteAccessTokenMutation, DeleteAccessTokenMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteAccessTokenMutation, DeleteAccessTokenMutationVariables>(DeleteAccessTokenDocument, options);
      }
export type DeleteAccessTokenMutationHookResult = ReturnType<typeof useDeleteAccessTokenMutation>;
export type DeleteAccessTokenMutationResult = Apollo.MutationResult<DeleteAccessTokenMutation>;
export type DeleteAccessTokenMutationOptions = Apollo.BaseMutationOptions<DeleteAccessTokenMutation, DeleteAccessTokenMutationVariables>;
export const DeleteArticleDocument = gql`
    mutation DeleteArticle($input: DeleteArticleMutationInput!) {
  deleteArticle(input: $input)
}
    `;
export type DeleteArticleMutationFn = Apollo.MutationFunction<DeleteArticleMutation, DeleteArticleMutationVariables>;

/**
 * __useDeleteArticleMutation__
 *
 * To run a mutation, you first call `useDeleteArticleMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteArticleMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteArticleMutation, { data, loading, error }] = useDeleteArticleMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeleteArticleMutation(baseOptions?: Apollo.MutationHookOptions<DeleteArticleMutation, DeleteArticleMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteArticleMutation, DeleteArticleMutationVariables>(DeleteArticleDocument, options);
      }
export type DeleteArticleMutationHookResult = ReturnType<typeof useDeleteArticleMutation>;
export type DeleteArticleMutationResult = Apollo.MutationResult<DeleteArticleMutation>;
export type DeleteArticleMutationOptions = Apollo.BaseMutationOptions<DeleteArticleMutation, DeleteArticleMutationVariables>;
export const HideArticleDocument = gql`
    mutation HideArticle($input: HideArticleMutationInput!) {
  hideArticle(input: $input) {
    error
    success
  }
}
    `;
export type HideArticleMutationFn = Apollo.MutationFunction<HideArticleMutation, HideArticleMutationVariables>;

/**
 * __useHideArticleMutation__
 *
 * To run a mutation, you first call `useHideArticleMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useHideArticleMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [hideArticleMutation, { data, loading, error }] = useHideArticleMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useHideArticleMutation(baseOptions?: Apollo.MutationHookOptions<HideArticleMutation, HideArticleMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<HideArticleMutation, HideArticleMutationVariables>(HideArticleDocument, options);
      }
export type HideArticleMutationHookResult = ReturnType<typeof useHideArticleMutation>;
export type HideArticleMutationResult = Apollo.MutationResult<HideArticleMutation>;
export type HideArticleMutationOptions = Apollo.BaseMutationOptions<HideArticleMutation, HideArticleMutationVariables>;
export const PublishArticleDocument = gql`
    mutation PublishArticle($input: PublishArticleMutationInput!) {
  publishArticle(input: $input)
}
    `;
export type PublishArticleMutationFn = Apollo.MutationFunction<PublishArticleMutation, PublishArticleMutationVariables>;

/**
 * __usePublishArticleMutation__
 *
 * To run a mutation, you first call `usePublishArticleMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `usePublishArticleMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [publishArticleMutation, { data, loading, error }] = usePublishArticleMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function usePublishArticleMutation(baseOptions?: Apollo.MutationHookOptions<PublishArticleMutation, PublishArticleMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<PublishArticleMutation, PublishArticleMutationVariables>(PublishArticleDocument, options);
      }
export type PublishArticleMutationHookResult = ReturnType<typeof usePublishArticleMutation>;
export type PublishArticleMutationResult = Apollo.MutationResult<PublishArticleMutation>;
export type PublishArticleMutationOptions = Apollo.BaseMutationOptions<PublishArticleMutation, PublishArticleMutationVariables>;
export const ReadNotificationDocument = gql`
    mutation ReadNotification($input: ReadNotificationMutationInput!) {
  readNotification(input: $input) {
    id
    readAt
  }
}
    `;
export type ReadNotificationMutationFn = Apollo.MutationFunction<ReadNotificationMutation, ReadNotificationMutationVariables>;

/**
 * __useReadNotificationMutation__
 *
 * To run a mutation, you first call `useReadNotificationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useReadNotificationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [readNotificationMutation, { data, loading, error }] = useReadNotificationMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useReadNotificationMutation(baseOptions?: Apollo.MutationHookOptions<ReadNotificationMutation, ReadNotificationMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<ReadNotificationMutation, ReadNotificationMutationVariables>(ReadNotificationDocument, options);
      }
export type ReadNotificationMutationHookResult = ReturnType<typeof useReadNotificationMutation>;
export type ReadNotificationMutationResult = Apollo.MutationResult<ReadNotificationMutation>;
export type ReadNotificationMutationOptions = Apollo.BaseMutationOptions<ReadNotificationMutation, ReadNotificationMutationVariables>;
export const ReadNotificationsDocument = gql`
    mutation ReadNotifications($input: ReadNotificationsMutationInput!) {
  readNotifications(input: $input)
}
    `;
export type ReadNotificationsMutationFn = Apollo.MutationFunction<ReadNotificationsMutation, ReadNotificationsMutationVariables>;

/**
 * __useReadNotificationsMutation__
 *
 * To run a mutation, you first call `useReadNotificationsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useReadNotificationsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [readNotificationsMutation, { data, loading, error }] = useReadNotificationsMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useReadNotificationsMutation(baseOptions?: Apollo.MutationHookOptions<ReadNotificationsMutation, ReadNotificationsMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<ReadNotificationsMutation, ReadNotificationsMutationVariables>(ReadNotificationsDocument, options);
      }
export type ReadNotificationsMutationHookResult = ReturnType<typeof useReadNotificationsMutation>;
export type ReadNotificationsMutationResult = Apollo.MutationResult<ReadNotificationsMutation>;
export type ReadNotificationsMutationOptions = Apollo.BaseMutationOptions<ReadNotificationsMutation, ReadNotificationsMutationVariables>;
export const SwitchLocaleDocument = gql`
    mutation SwitchLocale($input: SwitchLocaleMutationInput!) {
  switchLocale(input: $input)
}
    `;
export type SwitchLocaleMutationFn = Apollo.MutationFunction<SwitchLocaleMutation, SwitchLocaleMutationVariables>;

/**
 * __useSwitchLocaleMutation__
 *
 * To run a mutation, you first call `useSwitchLocaleMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSwitchLocaleMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [switchLocaleMutation, { data, loading, error }] = useSwitchLocaleMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSwitchLocaleMutation(baseOptions?: Apollo.MutationHookOptions<SwitchLocaleMutation, SwitchLocaleMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<SwitchLocaleMutation, SwitchLocaleMutationVariables>(SwitchLocaleDocument, options);
      }
export type SwitchLocaleMutationHookResult = ReturnType<typeof useSwitchLocaleMutation>;
export type SwitchLocaleMutationResult = Apollo.MutationResult<SwitchLocaleMutation>;
export type SwitchLocaleMutationOptions = Apollo.BaseMutationOptions<SwitchLocaleMutation, SwitchLocaleMutationVariables>;
export const UpdateArticleDocument = gql`
    mutation UpdateArticle($input: UpdateArticleMutationInput!) {
  updateArticle(input: $input) {
    id
    uuid
    updatedAt
  }
}
    `;
export type UpdateArticleMutationFn = Apollo.MutationFunction<UpdateArticleMutation, UpdateArticleMutationVariables>;

/**
 * __useUpdateArticleMutation__
 *
 * To run a mutation, you first call `useUpdateArticleMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateArticleMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateArticleMutation, { data, loading, error }] = useUpdateArticleMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateArticleMutation(baseOptions?: Apollo.MutationHookOptions<UpdateArticleMutation, UpdateArticleMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateArticleMutation, UpdateArticleMutationVariables>(UpdateArticleDocument, options);
      }
export type UpdateArticleMutationHookResult = ReturnType<typeof useUpdateArticleMutation>;
export type UpdateArticleMutationResult = Apollo.MutationResult<UpdateArticleMutation>;
export type UpdateArticleMutationOptions = Apollo.BaseMutationOptions<UpdateArticleMutation, UpdateArticleMutationVariables>;
export const UpdateNotificationSettingDocument = gql`
    mutation UpdateNotificationSetting($input: UpdateNotificationSettingMutationInput!) {
  updateNotificationSetting(input: $input) {
    id
    webhookUrl
    articlePublishedWeb
    articlePublishedMixinBot
    articlePublishedWebhook
    articleBoughtWeb
    articleBoughtMixinBot
    articleBoughtWebhook
    articleRewardedWeb
    articleRewardedMixinBot
    articleRewardedWebhook
    commentCreatedWeb
    commentCreatedMixinBot
    commentCreatedWebhook
    taggingCreatedWeb
    taggingCreatedMixinBot
    taggingCreatedWebhook
    transferProcessedWeb
    transferProcessedMixinBot
    transferProcessedWebhook
  }
}
    `;
export type UpdateNotificationSettingMutationFn = Apollo.MutationFunction<UpdateNotificationSettingMutation, UpdateNotificationSettingMutationVariables>;

/**
 * __useUpdateNotificationSettingMutation__
 *
 * To run a mutation, you first call `useUpdateNotificationSettingMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateNotificationSettingMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateNotificationSettingMutation, { data, loading, error }] = useUpdateNotificationSettingMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateNotificationSettingMutation(baseOptions?: Apollo.MutationHookOptions<UpdateNotificationSettingMutation, UpdateNotificationSettingMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateNotificationSettingMutation, UpdateNotificationSettingMutationVariables>(UpdateNotificationSettingDocument, options);
      }
export type UpdateNotificationSettingMutationHookResult = ReturnType<typeof useUpdateNotificationSettingMutation>;
export type UpdateNotificationSettingMutationResult = Apollo.MutationResult<UpdateNotificationSettingMutation>;
export type UpdateNotificationSettingMutationOptions = Apollo.BaseMutationOptions<UpdateNotificationSettingMutation, UpdateNotificationSettingMutationVariables>;
export const MyAccessTokenConnectionDocument = gql`
    query MyAccessTokenConnection($after: String) {
  myAccessTokenConnection(after: $after) {
    nodes {
      id
      memo
      desensitizedValue
      lastRequestAt
      lastRequestIp
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useMyAccessTokenConnectionQuery__
 *
 * To run a query within a React component, call `useMyAccessTokenConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useMyAccessTokenConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMyAccessTokenConnectionQuery({
 *   variables: {
 *      after: // value for 'after'
 *   },
 * });
 */
export function useMyAccessTokenConnectionQuery(baseOptions?: Apollo.QueryHookOptions<MyAccessTokenConnectionQuery, MyAccessTokenConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<MyAccessTokenConnectionQuery, MyAccessTokenConnectionQueryVariables>(MyAccessTokenConnectionDocument, options);
      }
export function useMyAccessTokenConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyAccessTokenConnectionQuery, MyAccessTokenConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<MyAccessTokenConnectionQuery, MyAccessTokenConnectionQueryVariables>(MyAccessTokenConnectionDocument, options);
        }
export type MyAccessTokenConnectionQueryHookResult = ReturnType<typeof useMyAccessTokenConnectionQuery>;
export type MyAccessTokenConnectionLazyQueryHookResult = ReturnType<typeof useMyAccessTokenConnectionLazyQuery>;
export type MyAccessTokenConnectionQueryResult = Apollo.QueryResult<MyAccessTokenConnectionQuery, MyAccessTokenConnectionQueryVariables>;
export const MyArticleConnectionDocument = gql`
    query MyArticleConnection($type: String!, $query: String, $state: String, $after: String) {
  myArticleConnection(type: $type, query: $query, state: $state, after: $after) {
    nodes {
      uuid
      title
      intro
      price
      revenueUsd
      revenueBtc
      ordersCount
      state
      author {
        name
        avatar
      }
      createdAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useMyArticleConnectionQuery__
 *
 * To run a query within a React component, call `useMyArticleConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useMyArticleConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMyArticleConnectionQuery({
 *   variables: {
 *      type: // value for 'type'
 *      query: // value for 'query'
 *      state: // value for 'state'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useMyArticleConnectionQuery(baseOptions: Apollo.QueryHookOptions<MyArticleConnectionQuery, MyArticleConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<MyArticleConnectionQuery, MyArticleConnectionQueryVariables>(MyArticleConnectionDocument, options);
      }
export function useMyArticleConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyArticleConnectionQuery, MyArticleConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<MyArticleConnectionQuery, MyArticleConnectionQueryVariables>(MyArticleConnectionDocument, options);
        }
export type MyArticleConnectionQueryHookResult = ReturnType<typeof useMyArticleConnectionQuery>;
export type MyArticleConnectionLazyQueryHookResult = ReturnType<typeof useMyArticleConnectionLazyQuery>;
export type MyArticleConnectionQueryResult = Apollo.QueryResult<MyArticleConnectionQuery, MyArticleConnectionQueryVariables>;
export const MyArticleOrderConnectionDocument = gql`
    query MyArticleOrderConnection($uuid: ID!, $orderType: String!, $after: String) {
  myArticleOrderConnection(uuid: $uuid, orderType: $orderType, after: $after) {
    nodes {
      traceId
      buyer {
        avatar
        name
      }
      citer {
        ... on Article {
          uuid
          title
        }
      }
      orderType
      state
      total
      currency {
        assetId
        symbol
        iconUrl
      }
      createdAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useMyArticleOrderConnectionQuery__
 *
 * To run a query within a React component, call `useMyArticleOrderConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useMyArticleOrderConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMyArticleOrderConnectionQuery({
 *   variables: {
 *      uuid: // value for 'uuid'
 *      orderType: // value for 'orderType'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useMyArticleOrderConnectionQuery(baseOptions: Apollo.QueryHookOptions<MyArticleOrderConnectionQuery, MyArticleOrderConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<MyArticleOrderConnectionQuery, MyArticleOrderConnectionQueryVariables>(MyArticleOrderConnectionDocument, options);
      }
export function useMyArticleOrderConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyArticleOrderConnectionQuery, MyArticleOrderConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<MyArticleOrderConnectionQuery, MyArticleOrderConnectionQueryVariables>(MyArticleOrderConnectionDocument, options);
        }
export type MyArticleOrderConnectionQueryHookResult = ReturnType<typeof useMyArticleOrderConnectionQuery>;
export type MyArticleOrderConnectionLazyQueryHookResult = ReturnType<typeof useMyArticleOrderConnectionLazyQuery>;
export type MyArticleOrderConnectionQueryResult = Apollo.QueryResult<MyArticleOrderConnectionQuery, MyArticleOrderConnectionQueryVariables>;
export const MyArticleDocument = gql`
    query MyArticle($uuid: ID!) {
  myArticle(uuid: $uuid) {
    id
    uuid
    title
    intro
    content
    state
    price
    assetId
    ordersCount
    commentsCount
    revenueUsd
    authorRevenueRatio
    readersRevenueRatio
    platformRevenueRatio
    referencesRevenueRatio
    authorRevenueUsd
    readerRevenueUsd
    commentingSubscribed
    upvotesCount
    downvotesCount
    wordsCount
    tagsCount
    tagNames
    createdAt
    updatedAt
    buyers {
      totalCount
    }
    buyOrders {
      totalCount
    }
    rewarders {
      totalCount
    }
    rewardOrders {
      totalCount
    }
    comments {
      totalCount
    }
    currency {
      assetId
      symbol
      iconUrl
      priceUsd
      priceBtc
    }
    articleReferences {
      revenueRatio
      reference {
        author {
          mixinUuid
          name
          avatar
        }
        uuid
        title
      }
    }
  }
}
    `;

/**
 * __useMyArticleQuery__
 *
 * To run a query within a React component, call `useMyArticleQuery` and pass it any options that fit your needs.
 * When your component renders, `useMyArticleQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMyArticleQuery({
 *   variables: {
 *      uuid: // value for 'uuid'
 *   },
 * });
 */
export function useMyArticleQuery(baseOptions: Apollo.QueryHookOptions<MyArticleQuery, MyArticleQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<MyArticleQuery, MyArticleQueryVariables>(MyArticleDocument, options);
      }
export function useMyArticleLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyArticleQuery, MyArticleQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<MyArticleQuery, MyArticleQueryVariables>(MyArticleDocument, options);
        }
export type MyArticleQueryHookResult = ReturnType<typeof useMyArticleQuery>;
export type MyArticleLazyQueryHookResult = ReturnType<typeof useMyArticleLazyQuery>;
export type MyArticleQueryResult = Apollo.QueryResult<MyArticleQuery, MyArticleQueryVariables>;
export const MyAuthoringSubscriptionConnectionDocument = gql`
    query MyAuthoringSubscriptionConnection($after: String) {
  myAuthoringSubscriptionConnection(after: $after) {
    nodes {
      id
      mixinId
      name
      avatar
      bio
      statistics {
        articlesCount
        authorRevenueTotalUsd
      }
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useMyAuthoringSubscriptionConnectionQuery__
 *
 * To run a query within a React component, call `useMyAuthoringSubscriptionConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useMyAuthoringSubscriptionConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMyAuthoringSubscriptionConnectionQuery({
 *   variables: {
 *      after: // value for 'after'
 *   },
 * });
 */
export function useMyAuthoringSubscriptionConnectionQuery(baseOptions?: Apollo.QueryHookOptions<MyAuthoringSubscriptionConnectionQuery, MyAuthoringSubscriptionConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<MyAuthoringSubscriptionConnectionQuery, MyAuthoringSubscriptionConnectionQueryVariables>(MyAuthoringSubscriptionConnectionDocument, options);
      }
export function useMyAuthoringSubscriptionConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyAuthoringSubscriptionConnectionQuery, MyAuthoringSubscriptionConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<MyAuthoringSubscriptionConnectionQuery, MyAuthoringSubscriptionConnectionQueryVariables>(MyAuthoringSubscriptionConnectionDocument, options);
        }
export type MyAuthoringSubscriptionConnectionQueryHookResult = ReturnType<typeof useMyAuthoringSubscriptionConnectionQuery>;
export type MyAuthoringSubscriptionConnectionLazyQueryHookResult = ReturnType<typeof useMyAuthoringSubscriptionConnectionLazyQuery>;
export type MyAuthoringSubscriptionConnectionQueryResult = Apollo.QueryResult<MyAuthoringSubscriptionConnectionQuery, MyAuthoringSubscriptionConnectionQueryVariables>;
export const MyCommentingSubscriptionConnectionDocument = gql`
    query MyCommentingSubscriptionConnection($after: String) {
  myCommentingSubscriptionConnection(after: $after) {
    nodes {
      id
      uuid
      title
      revenueUsd
      revenueBtc
      intro
      commentsCount
      author {
        name
      }
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useMyCommentingSubscriptionConnectionQuery__
 *
 * To run a query within a React component, call `useMyCommentingSubscriptionConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useMyCommentingSubscriptionConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMyCommentingSubscriptionConnectionQuery({
 *   variables: {
 *      after: // value for 'after'
 *   },
 * });
 */
export function useMyCommentingSubscriptionConnectionQuery(baseOptions?: Apollo.QueryHookOptions<MyCommentingSubscriptionConnectionQuery, MyCommentingSubscriptionConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<MyCommentingSubscriptionConnectionQuery, MyCommentingSubscriptionConnectionQueryVariables>(MyCommentingSubscriptionConnectionDocument, options);
      }
export function useMyCommentingSubscriptionConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyCommentingSubscriptionConnectionQuery, MyCommentingSubscriptionConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<MyCommentingSubscriptionConnectionQuery, MyCommentingSubscriptionConnectionQueryVariables>(MyCommentingSubscriptionConnectionDocument, options);
        }
export type MyCommentingSubscriptionConnectionQueryHookResult = ReturnType<typeof useMyCommentingSubscriptionConnectionQuery>;
export type MyCommentingSubscriptionConnectionLazyQueryHookResult = ReturnType<typeof useMyCommentingSubscriptionConnectionLazyQuery>;
export type MyCommentingSubscriptionConnectionQueryResult = Apollo.QueryResult<MyCommentingSubscriptionConnectionQuery, MyCommentingSubscriptionConnectionQueryVariables>;
export const MyNotificationConnectionDocument = gql`
    query MyNotificationConnection($after: String, $type: String) {
  myNotificationConnection(after: $after, type: $type) {
    nodes {
      id
      type
      message
      url
      readAt
      createdAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useMyNotificationConnectionQuery__
 *
 * To run a query within a React component, call `useMyNotificationConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useMyNotificationConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMyNotificationConnectionQuery({
 *   variables: {
 *      after: // value for 'after'
 *      type: // value for 'type'
 *   },
 * });
 */
export function useMyNotificationConnectionQuery(baseOptions?: Apollo.QueryHookOptions<MyNotificationConnectionQuery, MyNotificationConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<MyNotificationConnectionQuery, MyNotificationConnectionQueryVariables>(MyNotificationConnectionDocument, options);
      }
export function useMyNotificationConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyNotificationConnectionQuery, MyNotificationConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<MyNotificationConnectionQuery, MyNotificationConnectionQueryVariables>(MyNotificationConnectionDocument, options);
        }
export type MyNotificationConnectionQueryHookResult = ReturnType<typeof useMyNotificationConnectionQuery>;
export type MyNotificationConnectionLazyQueryHookResult = ReturnType<typeof useMyNotificationConnectionLazyQuery>;
export type MyNotificationConnectionQueryResult = Apollo.QueryResult<MyNotificationConnectionQuery, MyNotificationConnectionQueryVariables>;
export const MyNotificationSettingDocument = gql`
    query MyNotificationSetting {
  myNotificationSetting {
    id
    webhookUrl
    articlePublishedWeb
    articlePublishedMixinBot
    articlePublishedWebhook
    articleBoughtWeb
    articleBoughtMixinBot
    articleBoughtWebhook
    articleRewardedWeb
    articleRewardedMixinBot
    articleRewardedWebhook
    commentCreatedWeb
    commentCreatedMixinBot
    commentCreatedWebhook
    taggingCreatedWeb
    taggingCreatedMixinBot
    taggingCreatedWebhook
    transferProcessedWeb
    transferProcessedMixinBot
    transferProcessedWebhook
  }
}
    `;

/**
 * __useMyNotificationSettingQuery__
 *
 * To run a query within a React component, call `useMyNotificationSettingQuery` and pass it any options that fit your needs.
 * When your component renders, `useMyNotificationSettingQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMyNotificationSettingQuery({
 *   variables: {
 *   },
 * });
 */
export function useMyNotificationSettingQuery(baseOptions?: Apollo.QueryHookOptions<MyNotificationSettingQuery, MyNotificationSettingQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<MyNotificationSettingQuery, MyNotificationSettingQueryVariables>(MyNotificationSettingDocument, options);
      }
export function useMyNotificationSettingLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyNotificationSettingQuery, MyNotificationSettingQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<MyNotificationSettingQuery, MyNotificationSettingQueryVariables>(MyNotificationSettingDocument, options);
        }
export type MyNotificationSettingQueryHookResult = ReturnType<typeof useMyNotificationSettingQuery>;
export type MyNotificationSettingLazyQueryHookResult = ReturnType<typeof useMyNotificationSettingLazyQuery>;
export type MyNotificationSettingQueryResult = Apollo.QueryResult<MyNotificationSettingQuery, MyNotificationSettingQueryVariables>;
export const MyPaymentConnectionDocument = gql`
    query MyPaymentConnection($after: String) {
  myPaymentConnection(after: $after) {
    nodes {
      traceId
      snapshotId
      amount
      assetId
      state
      createdAt
      order {
        item {
          ... on Article {
            title
            uuid
          }
        }
      }
      currency {
        assetId
        iconUrl
        symbol
      }
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useMyPaymentConnectionQuery__
 *
 * To run a query within a React component, call `useMyPaymentConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useMyPaymentConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMyPaymentConnectionQuery({
 *   variables: {
 *      after: // value for 'after'
 *   },
 * });
 */
export function useMyPaymentConnectionQuery(baseOptions?: Apollo.QueryHookOptions<MyPaymentConnectionQuery, MyPaymentConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<MyPaymentConnectionQuery, MyPaymentConnectionQueryVariables>(MyPaymentConnectionDocument, options);
      }
export function useMyPaymentConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyPaymentConnectionQuery, MyPaymentConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<MyPaymentConnectionQuery, MyPaymentConnectionQueryVariables>(MyPaymentConnectionDocument, options);
        }
export type MyPaymentConnectionQueryHookResult = ReturnType<typeof useMyPaymentConnectionQuery>;
export type MyPaymentConnectionLazyQueryHookResult = ReturnType<typeof useMyPaymentConnectionLazyQuery>;
export type MyPaymentConnectionQueryResult = Apollo.QueryResult<MyPaymentConnectionQuery, MyPaymentConnectionQueryVariables>;
export const MyReadingSubscriptionConnectionDocument = gql`
    query MyReadingSubscriptionConnection($after: String) {
  myReadingSubscriptionConnection(after: $after) {
    nodes {
      id
      mixinId
      name
      avatar
      bio
      statistics {
        boughtArticlesCount
        readerRevenueTotalUsd
      }
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useMyReadingSubscriptionConnectionQuery__
 *
 * To run a query within a React component, call `useMyReadingSubscriptionConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useMyReadingSubscriptionConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMyReadingSubscriptionConnectionQuery({
 *   variables: {
 *      after: // value for 'after'
 *   },
 * });
 */
export function useMyReadingSubscriptionConnectionQuery(baseOptions?: Apollo.QueryHookOptions<MyReadingSubscriptionConnectionQuery, MyReadingSubscriptionConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<MyReadingSubscriptionConnectionQuery, MyReadingSubscriptionConnectionQueryVariables>(MyReadingSubscriptionConnectionDocument, options);
      }
export function useMyReadingSubscriptionConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyReadingSubscriptionConnectionQuery, MyReadingSubscriptionConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<MyReadingSubscriptionConnectionQuery, MyReadingSubscriptionConnectionQueryVariables>(MyReadingSubscriptionConnectionDocument, options);
        }
export type MyReadingSubscriptionConnectionQueryHookResult = ReturnType<typeof useMyReadingSubscriptionConnectionQuery>;
export type MyReadingSubscriptionConnectionLazyQueryHookResult = ReturnType<typeof useMyReadingSubscriptionConnectionLazyQuery>;
export type MyReadingSubscriptionConnectionQueryResult = Apollo.QueryResult<MyReadingSubscriptionConnectionQuery, MyReadingSubscriptionConnectionQueryVariables>;
export const MyStatisticsDocument = gql`
    query MyStatistics {
  myStatistics {
    articlesCount
    boughtArticlesCount
    authorRevenueTotalPrs
    readerRevenueTotalPrs
    authorRevenueTotalBtc
    readerRevenueTotalBtc
    authorRevenueTotalUsd
    readerRevenueTotalUsd
    paymentTotalUsd
  }
}
    `;

/**
 * __useMyStatisticsQuery__
 *
 * To run a query within a React component, call `useMyStatisticsQuery` and pass it any options that fit your needs.
 * When your component renders, `useMyStatisticsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMyStatisticsQuery({
 *   variables: {
 *   },
 * });
 */
export function useMyStatisticsQuery(baseOptions?: Apollo.QueryHookOptions<MyStatisticsQuery, MyStatisticsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<MyStatisticsQuery, MyStatisticsQueryVariables>(MyStatisticsDocument, options);
      }
export function useMyStatisticsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyStatisticsQuery, MyStatisticsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<MyStatisticsQuery, MyStatisticsQueryVariables>(MyStatisticsDocument, options);
        }
export type MyStatisticsQueryHookResult = ReturnType<typeof useMyStatisticsQuery>;
export type MyStatisticsLazyQueryHookResult = ReturnType<typeof useMyStatisticsLazyQuery>;
export type MyStatisticsQueryResult = Apollo.QueryResult<MyStatisticsQuery, MyStatisticsQueryVariables>;
export const MySwapOrderConnectionDocument = gql`
    query MySwapOrderConnection($after: String) {
  mySwapOrderConnection(after: $after) {
    nodes {
      id
      traceId
      state
      funds
      amount
      minAmount
      fillAssetId
      payAssetId
      article {
        uuid
        title
        price
      }
      payAsset {
        assetId
        iconUrl
        symbol
      }
      fillAsset {
        assetId
        iconUrl
        symbol
      }
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useMySwapOrderConnectionQuery__
 *
 * To run a query within a React component, call `useMySwapOrderConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useMySwapOrderConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMySwapOrderConnectionQuery({
 *   variables: {
 *      after: // value for 'after'
 *   },
 * });
 */
export function useMySwapOrderConnectionQuery(baseOptions?: Apollo.QueryHookOptions<MySwapOrderConnectionQuery, MySwapOrderConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<MySwapOrderConnectionQuery, MySwapOrderConnectionQueryVariables>(MySwapOrderConnectionDocument, options);
      }
export function useMySwapOrderConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MySwapOrderConnectionQuery, MySwapOrderConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<MySwapOrderConnectionQuery, MySwapOrderConnectionQueryVariables>(MySwapOrderConnectionDocument, options);
        }
export type MySwapOrderConnectionQueryHookResult = ReturnType<typeof useMySwapOrderConnectionQuery>;
export type MySwapOrderConnectionLazyQueryHookResult = ReturnType<typeof useMySwapOrderConnectionLazyQuery>;
export type MySwapOrderConnectionQueryResult = Apollo.QueryResult<MySwapOrderConnectionQuery, MySwapOrderConnectionQueryVariables>;
export const MyTagSubscriptionConnectionDocument = gql`
    query MyTagSubscriptionConnection($after: String) {
  myTagSubscriptionConnection(after: $after) {
    nodes {
      id
      name
      color
      articlesCount
      subscribersCount
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useMyTagSubscriptionConnectionQuery__
 *
 * To run a query within a React component, call `useMyTagSubscriptionConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useMyTagSubscriptionConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMyTagSubscriptionConnectionQuery({
 *   variables: {
 *      after: // value for 'after'
 *   },
 * });
 */
export function useMyTagSubscriptionConnectionQuery(baseOptions?: Apollo.QueryHookOptions<MyTagSubscriptionConnectionQuery, MyTagSubscriptionConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<MyTagSubscriptionConnectionQuery, MyTagSubscriptionConnectionQueryVariables>(MyTagSubscriptionConnectionDocument, options);
      }
export function useMyTagSubscriptionConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyTagSubscriptionConnectionQuery, MyTagSubscriptionConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<MyTagSubscriptionConnectionQuery, MyTagSubscriptionConnectionQueryVariables>(MyTagSubscriptionConnectionDocument, options);
        }
export type MyTagSubscriptionConnectionQueryHookResult = ReturnType<typeof useMyTagSubscriptionConnectionQuery>;
export type MyTagSubscriptionConnectionLazyQueryHookResult = ReturnType<typeof useMyTagSubscriptionConnectionLazyQuery>;
export type MyTagSubscriptionConnectionQueryResult = Apollo.QueryResult<MyTagSubscriptionConnectionQuery, MyTagSubscriptionConnectionQueryVariables>;
export const MyTransferConnectionDocument = gql`
    query MyTransferConnection($transferType: String, $after: String) {
  myTransferConnection(transferType: $transferType, after: $after) {
    nodes {
      traceId
      snapshotId
      amount
      assetId
      transferType
      createdAt
      article {
        uuid
        title
      }
      currency {
        assetId
        iconUrl
        symbol
      }
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useMyTransferConnectionQuery__
 *
 * To run a query within a React component, call `useMyTransferConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useMyTransferConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMyTransferConnectionQuery({
 *   variables: {
 *      transferType: // value for 'transferType'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useMyTransferConnectionQuery(baseOptions?: Apollo.QueryHookOptions<MyTransferConnectionQuery, MyTransferConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<MyTransferConnectionQuery, MyTransferConnectionQueryVariables>(MyTransferConnectionDocument, options);
      }
export function useMyTransferConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyTransferConnectionQuery, MyTransferConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<MyTransferConnectionQuery, MyTransferConnectionQueryVariables>(MyTransferConnectionDocument, options);
        }
export type MyTransferConnectionQueryHookResult = ReturnType<typeof useMyTransferConnectionQuery>;
export type MyTransferConnectionLazyQueryHookResult = ReturnType<typeof useMyTransferConnectionLazyQuery>;
export type MyTransferConnectionQueryResult = Apollo.QueryResult<MyTransferConnectionQuery, MyTransferConnectionQueryVariables>;
export const PricableCurrenciesDocument = gql`
    query PricableCurrencies {
  pricableCurrencies {
    id
    assetId
    name
    symbol
    iconUrl
    priceUsd
    priceBtc
  }
}
    `;

/**
 * __usePricableCurrenciesQuery__
 *
 * To run a query within a React component, call `usePricableCurrenciesQuery` and pass it any options that fit your needs.
 * When your component renders, `usePricableCurrenciesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePricableCurrenciesQuery({
 *   variables: {
 *   },
 * });
 */
export function usePricableCurrenciesQuery(baseOptions?: Apollo.QueryHookOptions<PricableCurrenciesQuery, PricableCurrenciesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<PricableCurrenciesQuery, PricableCurrenciesQueryVariables>(PricableCurrenciesDocument, options);
      }
export function usePricableCurrenciesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PricableCurrenciesQuery, PricableCurrenciesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<PricableCurrenciesQuery, PricableCurrenciesQueryVariables>(PricableCurrenciesDocument, options);
        }
export type PricableCurrenciesQueryHookResult = ReturnType<typeof usePricableCurrenciesQuery>;
export type PricableCurrenciesLazyQueryHookResult = ReturnType<typeof usePricableCurrenciesLazyQuery>;
export type PricableCurrenciesQueryResult = Apollo.QueryResult<PricableCurrenciesQuery, PricableCurrenciesQueryVariables>;